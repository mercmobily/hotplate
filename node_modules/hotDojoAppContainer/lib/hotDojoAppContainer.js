"use strict";

var dummy
  , hotplate = require( 'hotplate' )

  , path = require( 'path' )

  , hotCoreStoreRegistry = require('hotCoreStoreRegistry')
  , logger = require('hotCoreServerLogger')
  , hotCorePage = require('hotCorePage')
  , hotDojoWidgets = require('hotDojoWidgets') // CLIENT NEED
;

// Add routes for the multiHomeURL and for appURL depending on
// hotplate's hotCoreMultiHome configuration

hotplate.hotEvents.on( 'setRoutes', hotplate.cachable( function( app, done ){

  // Set the multiHome page, or the straight one
  if( hotplate.config.get('hotCoreMultiHome.enabled' ) ){
    app.get( hotplate.config.get('hotCoreMultiHome.multiHomeURL'), mainApp );
  } else {
    app.get( hotplate.config.get('hotCoreAuth.appURL'), mainApp);
  }

  done( null );
})); 

// Send the app page
// Note that workspaceId is not guaranteed to be there -- it's only there
// for multihome environments

function mainApp( req, res, next ){

  // Not logged in: the user must not get this page, redirect to
  // the initial login page instead
  if( ! req.session.loggedIn ){
    return res.redirect( hotplate.config.get('hotCoreAuth.redirectURLs.fail.signin') );
  }

  var extraJses = new hotCorePage.Jses;
  var extraCsses = new hotCorePage.Csses;
  var extraVars = new hotCorePage.Vars;
  var extraBodyLines = new hotCorePage.BodyLines;

  // Add all of the fail URLs, which will be needed by Javascript

  // WorkspaceId is not guaranteed to be there -- it's only there for multihome setups
  if( req.params.workspaceId ){

    hotCoreStoreRegistry.getAllStores( function( err, allStores ){
      if( err ){
        next( err );
      } else {
        allStores.workspaces.dbLayer.selectById( req.params.workspaceId, function( err, record ){
          if( err ){
            next( err );
          }  else {

            // Check that the user is allowed on the workspace
            allStores.workspacesUsers.dbLayer.selectByHash( { conditions: { workspaceId: req.params.workspaceId, userId: req.session.userId } }, {children: true }, function( err, wsRecords ){
              if( err ){
                next( err );
              } else {
                // Not allowed: knocked back.
                if( wsRecords.length !== 1 ){
                  res.redirect( hotplate.config.get('hotCoreAuth.redirectURLs.fail.signin') );
                } else {
                  // All good, the page CAN be served!
                  restOfTheFunction();
                }
              }
            });
          }
        });
      }
    });
  } else {
    restOfTheFunction();
  }
 
  function restOfTheFunction(){ 

    hotCorePage.processPageTemplate(
    {
      vars: (new hotCorePage.Vars() ).add( 'hotDojoAppContainer', { 
        name: 'failURLs', 
        value: hotplate.config.get('hotCoreAuth.redirectURLs.fail')
      }),
      csses: (new hotCorePage.Csses() ).add( 'hotDojoAppContainer', 'mainContainer.css' ),
      bodyLines: (new hotCorePage.BodyLines() ).add( 'hotDojoAppContainer', '<div id="app-container"></div>' ),
    },
    req, 
    'hotDojoAppContainer/container',
    function( err, result ){ 
      if( err ){
        next( err );
        //logger.log( { message: "ERROR while App container page served" }, req );
      } else {
        res.send( result );
        logger.log( { message: "App container page served" }, req );
      }
    }
    );
    return;
  }
  
}


hotplate.hotEvents.on( 'dojoModulesPerPage', 'hotDojoAppContainer', function( req, pageName, done ){

  if( pageName === 'hotDojoAppContainer/container' ){
    done( null, [ 'mainContainer' ] );
  } else {
    done( null, [] );
  }

});


hotplate.hotEvents.on( 'clientPath', 'hotDojoAppContainer', function( done ){
  done( null, path.join( __dirname, '../client' ) );
})


