"use strict";

var dummy
  , path = require('path')
  , hotplate = require('hotplate')
  , declare = require('simpledeclare')

  , SimpleDbLayer = require( 'simpledblayer' )
  , SimpleSchema = require( 'simpleschema' )
  , JsonRestStores = require( 'jsonreststores' )

  , hotCoreJsonRestStores = require( 'hotCoreJsonRestStores' )
  , hotCoreStoreRegistry = require( 'hotCoreStoreRegistry' )
  , hotCoreServerLogger = require( 'hotCoreServerLogger' )
;

/**
Provides tranport functionalities (SMS an email) to hotplate modules

@module hotCoreTransport
@main hotCoreTransport
@class hotCoreTransport
@static
*/

// Set some sane defaults


hotplate.config.set('hotCoreTransport', {
  subsystems: {

  }
 
});


// var strategyMaker = require( './auth/' + strategyName );


/**
  Initialisation hook. It creates the basic authentication stores
  (Users, UsersStrategies, AuthStrategies, Logins) 

  @event init
  @requires hotCoreJsonRestStores hotCoreStoreRegistry hotCoreServerLogger
*/

hotplate.hotEvents.on( 'stores', 'hotCoreTransport', hotplate.cachable( function( done ){

  var stores = {}

  hotCoreJsonRestStores.get( function( err, s ){
    if( err ) return done( err );

    var HotStore = s.HotStore;
    var HotSchema = s.HotSchema;
    var BasicDbStore = s.BasicDbStore;
    var BasicSchema = s.BasicSchema;
 
    var Messages = declare( [ BasicDbStore ],  {

      schema: new HotSchema({
        id          : { type: 'id',     searchable: true },

        type        : { type: 'string', searchable: true, required: true,  notEmpty: true, trim: 5 },        
        from        : { type: 'string', searchable: true, required: true,  notEmpty: true, trim: 255 },        
        subject     : { type: 'string', searchable: true, required: true,  notEmpty: false, trim: 1024 },
        body        : { type: 'string', searchable: true, required: true,  notEmpty: true, trim: 256000 },
     }),

      idProperty: 'id',

      storeName:  'messages',

      nested: [
        {
          layer: 'messagesTo',
          join: { 'messageId': 'id' },
          type: 'multiple'
        },

        {
          layer: 'messagesToDeliveryLog',
          join: { 'messageId': 'id' },
          type: 'multiple'
        },
      ],

      hotExpose: false,

    });
    stores.messages = new Messages();

    // Status can be: delivering, delivered, undeliverable, dontdeliver
    var MessagesTo = declare( [ BasicDbStore ],  {

      schema: new HotSchema({
        id        : { type: 'id', searchable: true },
        messageId : { type: 'id', searchable: true },

        to        : { type: 'string', searchable: true, required: true, notEmpty: true, trim: 255 },        
        status    : { type: 'string', searchable: true, required: true, notEmpty: true, trim: 15 },
        attempts  : { type: 'number' },
      }),

      idProperty: 'id',

      storeName:  'messagesTo',

      hotExpose: false,

      nested: [
        {
          layer: 'messages',
          join: { 'id' : 'messageId' },
          type: 'lookup',
          parentField: 'messageId',
        },
      ],

    });
    stores.messagesTo = new MessagesTo();

    var MessagesToDeliveryLog = declare( [ BasicDbStore ],  {

      schema: new HotSchema({
        id          : { type: 'id', searchable: true },

        messageToId   : { type: 'id', searchable: true },
        messageId     : { type: 'id', searchable: true }, // NN

        date          : { type: 'date', default: function() { return new Date() } },
        level         : { type: 'number' },
        line          : { type: 'from', searchable: true, required: true, notEmpty: true, trim: 255 },        
      }),

      onlineSearchSchema: new HotSchema({
      }),

      nested: [
        {
          layer: 'messages',
          join: { 'id' : 'messageId' },
          type: 'lookup',
          parentField: 'messageId',
        },
        {
          layer: 'messagesTo',
          join: { 'id' : 'messageToId' },
          type: 'lookup',
          parentField: 'messageToId',
        },
      ],

      idProperty: 'id',

      storeName:  'messagesToDeliveryLog',

      hotExpose: false,

    });
    stores.messagesToDeliveryLog = new MessagesToDeliveryLog();

    done( null, stores );

  });

}))

/**

@event setRoutes
*/
hotplate.hotEvents.on( 'setRoutes', hotplate.cachable( function( app, done ){
  done( null );
}))



