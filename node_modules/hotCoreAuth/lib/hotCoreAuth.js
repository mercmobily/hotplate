"use strict";

/**
Provides authentication abilities to Hotplate, including password recovery, registration, login, credential management, and in-app resume

This module provides authentication abilities to your application by:

* Defining authentication stores to be used in your app
* Creating authentication routes to handle authentication using Passport

@module hotCoreAuth
*/


/**
Authentication is based on Passport, and it's the most complex part of Hotplate.
There are five actions connected to authentication:

* signin -- to actually login using existing credentials
* register -- to register as a new user, and automatically assign a strategy to them
* recover -- to reset credentials
* manager -- to manage credentials. This is used to associate a strategy to an existing (logged in) user
* resume -- to resume an existing session if authentication is expired. 

Note that while both `register` and `manager` associate a strategy to a user, `register` also _creates_ a brand new user. Also, while both `signin` and `resume` basically check that 

There are currently two implemented strategies (although it's trivial to create more):

* `local` -- using simply a combination of login and password
* `facebook` -- using Facebook's authentication scheme

In hotCoreAuth, the operation that is about to be performed is defined by the pair _strategy-action_. For example, `local-signin`, or `facebook-recover`, etc.

_NOTE: `hotCoreAuth` uses passport for every authentication strategy, including `local`. This is done mainly for consistency: `local` is not a two-step authentication, and it wouldn't need Passport stricky speaking._

While most of other authentication systems are based on username/password, and then allow you to associate other authentication methods to those username/password pairs, in hotCoreAuth _each login method is the same_. You might decide to sign up with your Facebook profile, and never bother with setting username/password or vice-versa. 

# How hotCoreAuth provides those functionalities

When it's run, `hotCoreAuth` will scan the configuration object `hotCoreAuth.strategies`: each key in the object is a strategy name. For example, for `local` `hotCoreAuth` will require `auth/facebook.js` which in turn will define:

* `/auth/signin/facebook`, `/auth/resume/facebook/callback`
* `/auth/register/facebook`, `/auth/resume/facebook/callback`
* `/auth/recover/facebook`, `/auth/resume/facebook/callback`
* `/auth/manager/facebook`, `/auth/resume/facebook/callback`
* `/auth/resume/facebook`, `/auth/resume/facebook/callback`

Each URL will actually be managed completely by Passport.

## Route definitions in `hotCoreAuth`

Understanding exactly what happens with hotCoreAuth is crucial to fully understand Passport. I will explain here how the `facebook-signin` operation happens, step by step.

First of all, the configuration object `hotCoreAuth.strategies` will need to have `facebook` defined as follows:

    facebook: {
      clientID: 'XXXXXXXXXXXX',
      clientSecret: 'XXXXXXXXXX',
    }

You will need to get those values from Facebook, as they are unique to you (you will actually need to logon to Facebook to obtain them).

`hotCoreAuth` will scan `hotCoreAuth.strategies`, will find `facebook`, and will load `auth/facebook.js`.

For `signin`, `facebook.js` will first define a `named strategy` called `facebook-signin`, as well as define two routes:

````
    // STRATEGY DEFINITION
    strategyConfig = hotplate.config.get( 'hotCoreAuth.strategies.facebook' );  
    passport.use( 'facebook-signin', new FacebookStrategy({
      clientID: strategyConfig.clientID,
      clientSecret: strategyConfig.clientSecret,
      callbackURL: callbackURLBase + prefix( "/auth/signin/facebook/callback" ),
      passReqToCallback: true,
    },

    // This will check if `profile` is registered and therefore allowed to login
    function customAuthentication( req, accessToken, refreshToken, profile, done ) {
      // This function will return either
      done( null, false, { message: "Facebook didn't return a profile ID, procedure aborted" } );
      // Or:
      done( null, false, { message: "Your Facebook user is not registered" } );
      // or:
      done( null, user, profile  );
    }
    ));

    // FIRST ROUTE
    app.get('/auth/signin/facebook', passport.authenticate('facebook-signin'));

    // SECOND ROUTE
    app.get('/auth/signin/facebook/callback', function( req, res, next) {
      passport.authenticate('facebook-signin',  makeResponder( req, res, next, 'facebook', 'signin')  )(req, res, next);
    });
````

Here is what this code does in detail.

With `passport.use( 'facebook-signin', new FacebookStrategy({`, you are registering a named strategy called `facebook-signin` with a bunch of facebook-specific parameters (`clientID`, `clientSecret`, etc.) and -- most importantly -- a callback used to check whether the `profile` returned by Facebook is actually allowed to sign in. This callback will call `done()` with the following parameters:

* `err` -- as usual in node
* `user` -- the user object, or `false` if authentication didn't work
* `info` -- additional information

The next two lines will define two routes.

The route `/auth/signin/facebook` is managed completely by Passport, which with `passport.authenticate('facebook-signin')` returns a valid Express route. This route, which will generally be opened in a new window in your client application, will redirect to facebook.com, passing Facebook the `clientID`, `clientSecret` and `callbackURL`. At the end of the process, Facebook will then always redirect the user's browser to `/auth/signin/facebook/callback` (the callback URL provided earlier to Facebook), which is -- needless to say -- another URL managed by Passport.

This is where things get interesting.

Facebook will connect to `/auth/signin/facebook/callback`, passing it information relevant to authentication: namely whether it worked or not, and -- if it did work -- the profile information. This is when passport calls the authentication callback, with the parameters `req, accessToken, refreshToken, profile, done`.  If `profile` isn't defined, then it means that Facebook authentication failed. If `profile` is set, then authentication in Facebook did work. Keep in mind that a successful Facebook login doesn't mean that that Facebook profile is allowed to signin into your application.

The route definition for the second URL can look a little confusing:

    app.get('/auth/signin/facebook/callback', function( req, res, next) {
      passport.authenticate('facebook-signin',  makeResponder( req, res, next, 'facebook', 'signin')  )(req, res, next);
    });

Basically, the whole route is delegated to Passport via `passport.authenticate()`, which will:

* Receive the response from Facebook
* Call the custom authentication function passing it `req, accessToken, refreshToken, profile, done`. The custom authentication function will call its callback with `err, user, profile`
  * The custom authentication function will need to set `req.session.loggedIn` and `req.session.userId` if that specific Facebook profile is registered
* Run the function _returned by `makeResponder()`_, passing it `err, user, profile`. Here where `user` and `profile` are the same values returned by the custom authentication function.

This is probably the trickiest part of hotCoreAuth: here, `makeResponder( req, res, next, strategy, action )` is a function generator, which will return a function with the right signature `(err, user, profile )`.

Basically, `makeResponder()` is the function that will respond to the client, having all of Express' request/response variables (`req, res, next`) and the login information (`user, profile`).

# How `makeResponder()` works

`makeResponder()` is how the authentication system communicates with the client application. Interaction here is tricky, because the type of response will depend on what the client is expecting. For example, if your application allows you to click on a "Facebook" link, which points straight to `/auth/signin/facebook`, once the Facebook authentication process is finished you will want to be redirected to either the "login successful" success page, or the "login failed" page. If you open a new browser window for authentication, once the Facebook process is finished, you will probably want to redirect the opening window to the correct URL.
The client can define what `makeResponder()` will do by setting a cookie. For example, if after the Facebook authentication (happening in a newly opened window) you want to redirect the opening tab, you should create a cookie called `facebook-signin` and assign it 'redirect-opener': this will ensure that `makeResponder()` will return a page crafted so that the "opener" is redirected, and the tab itself is closed.
The cookies can be: `XXXX-signin`, `XXXX-recover`, `XXXX-register`, `XXXX-resume`, `XXXX-manager` (where `XXXX` can be `facebook`, `local`, or any other authentication strategy.

Here is a list of possible response types (that is, the cookie value):

* `content` -- The function returned by hotCoreAuth.responsePage is run with parameters `strategyId, action, user, profile`, and the result is then served to the client.

* `close` -- If `user` is set, the window is closed immediately. If `user` isn't set and `profile` has a `message` attribute, the message is displayed with a Javascript `alert()` and the window is then closed. 

* `ajax` -- If `user` is set, it returns a page with status 200, and -- as contents -- a JSON string like so: `{ user: user, profile: profile }`.  If `user` isn't set, it returns a page with status `403` and a JSON string like so: `{ message: error }`

* `redirect-opener` -- If `user` is set, the current window is closed and the opening window (with the main login screen) is redirected to the URL set as `hotCoreAuth.redirectURLs.success['action']`. If `user` isn't set, `profile.message` is displayed as a javascript `alert()` and the current window is closed

* `redirect` -- If `user` is set, the current window redirected to the URL set as `hotCoreAuth.redirectURLs.success['action']`. If `user` isn't set, `req.session.messages` is pushed `{ type: 'error', message: profile.message }` and  the window is redirected to `hotCoreAuth.redirectURLs.fail['action']`. Note that the new page will have access to the message via the session.

The default action is `redirect`. The client application should set the relevant cookies at login time, before actioning any of the passport-related URLs.

## Configuration parameters

    { hotCoreAuth: {

      // The host/port parts of the URL, used are prefix for Oauth callbacks.
      // This should be changed to your server's IP in production
      callbackURLBase: 'http://localhost:3000',

       // Seconds for which the recover URL works for
      recoverURLexpiry: 60*30,

      // Strategies available
      strategies: {
        local: { },
      },

      // Redirect URLs. This is used by makeResponder for the redirect and redirect-opener actions
      // as well as /recover/:recoverToken (whick will redirect to `hotCoreAuth.redirectURLs.success.recover`)
      // Note that `hotplate.routeUrlsPrefix` prefixes are honoured (as they should).
      redirectURLs: {
      success: {
        signin: prefix( '/auth/pick' ),
        recover: prefix( '/auth/pick' ),
        register: prefix( '/auth/pick' ),
        manager: '/',
      },

      fail: {
        signin: prefix( '/auth/welcome' ),
        recover: prefix( '/auth/welcome' ),
        register: prefix(  '/auth/welcome' ),
        manager: '/',
      }
    },
    contentResponsePage: basicContentResponsePage,
      appURL: path.join( hotplate.config.get( 'hotplate.routeUrlsPrefix' ), '/app' ),
    };

@class hotCoreAuth
*/

var dummy
  , path = require('path')
  , hotplate = require('hotplate')
  , declare = require('simpledeclare')
  , async = require('async')

  , SimpleSchema = require( 'simpleschema' )
  , JsonRestStores = require( 'jsonreststores' )

  , hotCoreJsonRestStores = require( 'hotCoreJsonRestStores' )
  , hotCoreStoreRegistry = require( 'hotCoreStoreRegistry' )
  , hotCoreServerLogger = require( 'hotCoreServerLogger' )
;

function prefix( p ){
  return path.join( hotplate.config.get( 'hotplate.routeUrlsPrefix' ), p );
}


// Respond with the appropriate page, based on user (which might be set or not) and profile (which
// might include extra information, or just `message` if user isn't set)
var basicContentResponsePage = function( strategyId, action, user, profile ){
  var response = '';
  response += "<html><body><script type=\"text/javascript\">setTimeout(function(){ window.close() }, 5000);</script>RESPONSE</body></html>";
  return response;
};

// Respond with the appropriate page, based on user (which might be set or not) and profile (which
// might include extra information, or just `message` if user isn't set)
var basicCloseResponsePage = function( strategyId, action, user, profile ){
  // If !user, and there is a message, display that message
  if( ! user && typeof( profile.message) !== 'undefined'  ){
    // FIXME: http://stackoverflow.com/questions/17141863/escaping-error-message-in-javascript
    return '<html><script>window.opener.alert("' + profile.message + '");window.close();</script></html>';
  } else {
    return '<html><script>window.close();</script></html>';
  }
}

// Respond with the appropriate page, based on user (which might be set or not) and profile (which
// might include extra information, or just `message` if user isn't set)
// The opener should be redirected to hotCoreAuth.redirectURLs.success if successful
var basicRedirectOpenerResponsePage = function( strategyId, action, user, profile ){
  if( ! user && typeof( profile.message) !== 'undefined'  ){
    // FIXME: http://stackoverflow.com/questions/17141863/escaping-error-message-in-javascript
    return '<html><script>window.opener.alert("' + profile.message + '");window.close();</script></html>';   
  } else {
    var redirectURL = hotplate.config.get('hotCoreAuth.redirectURLs.success.' + action) || '/';
    return '<html><script>window.opener.location = "' + redirectURL + '";window.close();</script></html>';
  }
}

hotplate.config.set('hotCoreAuth', {

  callbackURLBase: 'http://localhost:3000',

  recoverURLexpiry: 60*30, // Seconds for which the recover URL works for

  // Only local strategy enabled by default
  strategies: {
    local: { },
  },

  redirectURLs: {
    success: {
      signin: prefix( '/auth/pick' ),
      recover: prefix( '/auth/pick' ),
      register: prefix( '/auth/pick' ),
      manager: prefix( '/' ),
    },

    fail: {
      signin: prefix( '/auth/welcome' ),
      recover: prefix( '/auth/welcome' ),
      register: prefix(  '/auth/welcome' ),
      manager: prefix( '/' ),
    }
  },
  contentResponsePage: basicContentResponsePage,
  closeResponsePage: basicCloseResponsePage,
  redirectOpenerResponsePage: basicRedirectOpenerResponsePage,

  appURL: path.join( hotplate.config.get( 'hotplate.routeUrlsPrefix' ), '/app' ),
});

/**
  Returns a function with signature `function( err, user, profile )`,
  which will serve the right response depending on the cookie
  called `strategyId + '-' + action`

  It might redirect, close, redirect opener and close, return JSON, etc.

  @method makeResponder
  @param {Object} req Express' `req`
  @param {Object} res Express' `res`
  @param {Function} next Express' `next()`
  @param {String} strategyIdThe make of the strategy (e.g. 'facebook', 'local')
  @param {String} action The action (`signin`, `recover`, `register`, `resume`, `manager`)
*/
exports.makeResponder = function( req, res, next, strategyId, action ) {

  return function(err, user, profile ) {

    var responseType, strategies;

    var k = req.cookies[ strategyId + '-' + action ];
    if( typeof( k ) !== 'undefined' ){
      responseType = k;
    }

    // Fallback option
    if( ! responseType ) responseType = 'redirect';

    // Defaults to an empty profile object
    if( typeof( profile ) === 'undefined' ){
      profile = {};
    }

    // Error: just return/next that
    if( err ) { return next( err ); }

    switch( responseType ){

      case 'content':
        // Work out the page's content by calling the user-set hotCoreAuth/contentResponsePage function
        var contentFunction = hotplate.config.get( 'hotCoreAuth.contentResponsePage' );
        var content = contentFunction( strategyId, action, user, profile );
        res.send( content );      
      break;

      case 'close':
        // Work out the page's content by calling the user-set hotCoreAuth/contentResponsePage function
        var contentFunction = hotplate.config.get( 'hotCoreAuth.closeResponsePage' );
        var content = contentFunction( strategyId, action, user, profile );
        res.send( content );      
      break;

      case 'ajax':

        if( user ){
          res.json( 200, { user: user, profile: profile } );
        } else {
          var error = 'Authentication error';
          if( typeof( profile.message) !== 'undefined' ) error =  profile.message;
          res.json( 403, { message: error } );
        }
      break;

      case 'redirect-opener':
        // Work out the page's content by calling the user-set hotCoreAuth/contentResponsePage function
        var contentFunction = hotplate.config.get( 'hotCoreAuth.redirectOpenerResponsePage' );
        var content = contentFunction( strategyId, action, user, profile );
        res.send( content );      
      break;

      case 'redirect':
      default:

        if( user ){
          var redirectURL = hotplate.config.get('hotCoreAuth.redirectURLs.success.' + action) || '/';
          res.redirect( redirectURL );
        } else {

          // Add the error to the session messages
          if( typeof( profile.message) !== 'undefined'  ){
            req.session.messages = req.session.messages || []; 
            req.session.messages.push( { type: 'error', message: profile.message } );
          }

          var redirectURL = hotplate.config.get('hotCoreAuth.redirectURLs.fail.' + action) || '/';
          res.redirect( redirectURL );
        }
      break;
    }
  }
}



/**
It returns the authentication stores 
The stores returned are:

## `authStrategies`

The strategies available. This store is a pseudo-store (it doesn't rely on data stored in a database). Its data is the keys of the configuration object `hotCoreAuth.strategies`, which is used to implement `get` and `getQuery`.
    
    var AuthStrategies = declare( JsonRestStores, JsonRestStores.HTTPMixin, {

      schema: new SimpleSchema({
        id:        { type: 'blob', isRequired: true, trim: 30 }  ,
      }),

      handleGet: true,
      handleGetQuery: true,

      storeName:  'authStrategies',

      publicURL: '/authstrategies/:id',
      hotExpose: true,

      // Fetch one strategy (if it's defined in hotCoreAuth.strategies)
      implementFetchOne: function( request, cb ){ },

      // Return the strategies, depending on `hotCoreAuth.strategies`'s keys
      implementQuery: function( request, cb ){ },
    });

    stores.authStrategies = new AuthStrategies();


## `users`

The list of users. Note that only very little information is stored about the user itself: this table only stores the `id` and the `recoverToken` fields. It is not exposed to the client application at all: it's only created to be accessible via API within Hotplate itself.

    var Users = declare( HotStore, {
  
      schema: new HotSchema({
        id                 : { type: 'id' },
        recoverToken       : { type: 'blob', searchable: true, notempty: true },
        recoverTokenCreated: { type: 'date', searchable: true, notempty: true },
      }),

      storeName:  'users',
      idProperty: 'id',
    });
    stores.users = new Users();

## `usersStrategies`

The list of strategies associated to a specific user. It implements `get`, `getQuery` and `delete`, and it only allows querying to the record owner (session.userId needs to match the query string's userId). It also doesn't allow a user to delete their last remaining strategy (otherwise they won't be allowed to log back in, nor to recover their access).

Note that `field3` and `field4` are used by hotCoreAuth to store sensitive information, as they are never returned by the store.
  
    var UsersStrategies = declare( HotStore, {
  
      schema: new HotSchema({
        strategyId:  { type: 'blob', searchable: true, required: true, trim: 30 }  ,
        field1:      { type: 'blob', searchable: true, required: false, trim: 255 } ,
        field2:      { type: 'blob', searchable: true, required: false, trim: 255 } ,
        field3:      { type: 'blob', searchable: true, required: false, trim: 255 } ,
        field4:      { type: 'blob', searchable: true, required: false, trim: 255 } ,
      }),
  
      // Nothing is searchable in usersStrategies by default
      onlineSearchSchema: new HotSchema({
      }),

      storeName:  'usersStrategies',

      publicURL: '/users/:userId/strategies/:id',
      hotExpose: true,

      preserveCacheOnReset: true,

      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      // Users are only allowed to use `delete`, `get` and `getQuery` on their own strategies
      // Also, users are only allowed to `delete` a strategy if it's not the last one remaining
      checkPermissions: function( request, method, cb ){ ... },
     
      // The field `field3` and `field4` are taken out of the equation, as they are "secret"
      extrapolateDoc: function( request, method, doc, cb ){ ... }
    });
    stores.usersStrategies = new UsersStrategies();

    
@event stores
@requires hotCoreJsonRestStores
@return {Object} An associative array of stores
*/
hotplate.hotEvents.onCollect( 'stores', 'hotCoreAuth', hotplate.cachable( function( done ){

  var stores = {}

  hotCoreJsonRestStores.get( function( err, s ){
    if( err ) return done( err );

    var HotStore = s.HotStore;
    var HotSchema = s.HotSchema;

    // ***********************************
    // *** USERS *************************
    // ***********************************

    var Users = declare( HotStore, {
  
      schema: new HotSchema({
        id                 : { type: 'id' },
        recoverToken       : { type: 'blob', searchable: true, notempty: true },
        recoverTokenCreated: { type: 'date', searchable: true, notempty: true },
      }),

      storeName:  'users',
      idProperty: 'id',
    });
    stores.users = new Users();
  
    var UsersStrategies = declare( HotStore, {
  
      schema: new HotSchema({
        strategyId:  { type: 'blob', searchable: true, required: true, trim: 30 }  ,
        field1:      { type: 'blob', searchable: true, required: false, trim: 255 } ,
        field2:      { type: 'blob', searchable: true, required: false, trim: 255 } ,
        field3:      { type: 'blob', searchable: true, required: false, trim: 255 } ,
        field4:      { type: 'blob', searchable: true, required: false, trim: 255 } ,
      }),
  
      // Nothing is searchable in usersStrategies by default
      onlineSearchSchema: new HotSchema({
      }),

      storeName:  'usersStrategies',

      publicURL: '/users/:userId/strategies/:id',
      hotExpose: true,

      preserveCacheOnReset: true,

      handleGet: true,
      handleGetQuery: true,
      handleDelete: true,

      checkPermissions: function( request, method, cb ){

        switch( method ){
          case 'get':
          case 'getQuery':
            // Only their own strategies
            if( request.session.userId != request.params.userId ) return cb( null, false );
            return cb( null, true );
          break;

          case 'delete':
            // Only their own strategies
            if( request.session.userId != request.params.userId ) return cb( null, false );
  
            // Don't allow them to delete the last remaining strategy, or they will not be allowed back in
            stores.usersStrategies.dbLayer.selectByHash( { conditions: { userId: request.data.fullDoc.userId } }, { children: true }, function( err, queryDocs) {
              if( err ) return cb( err );

              if( queryDocs.length > 1 ){
                cb( null, true );
              } else {
                cb( null, false );
              }
            });
          break;

          default:
            // Let it pass by default
            return cb( null, true );
          break;

        }
      },
     
      // Make sure that, if the request is from the web, field3 and field4 are out of the equation as
      // they often include nice goodies like passwords etc.
      extrapolateDoc: function( request, method, doc, cb ){

        var doc = this._co( doc );

        // Local request: all good
        if( ! request.remote ) return cb( null, doc );
  
        // Remote request: delete field, and return
        delete doc[ 'field3' ];
        delete doc[ 'field4' ];

        cb( null, doc );
        
      },
  
    });
    stores.usersStrategies = new UsersStrategies();
    

    var AuthStrategies = declare( JsonRestStores, JsonRestStores.HTTPMixin, {
  
      schema: new SimpleSchema({
        id:        { type: 'blob', isRequired: true, trim: 30 }  ,
      }),

      handleGet: true,
      handleGetQuery: true,
  
      storeName:  'authStrategies',
 
      //logError: function( error ){ hotCoreServerLogger.log( error ); },

      publicURL: '/authstrategies/:id',
      hotExpose: true,

      implementFetchOne: function( request, cb ){
        var strategies = hotplate.config.get('hotCoreAuth.strategies');
        var doc;
  
        // No strategies defined in Hotplate, end of story
        if( typeof( strategies ) === 'undefined' ){
          return cb( null, null );     
        }
   
        // Check if the strategy is one of the ones defined in Hotplate
        if( typeof( strategies[ params.id ] ) !== 'undefined' ){
          doc = {}
          doc.id = params.id;
        } else {
          doc = null;
        }
  
        // Return whatever was found
        cb( null, doc );
      },
  
      implementQuery: function( request, cb ){
        var strategies = hotplate.config.get('hotCoreAuth.strategies');
        var doc;
        var docs = [];
        
        for( var strategyId in strategies ){
          docs.push( { id: strategyId } );
        }      
        cb( null, docs );
      },
  
  
    });
  
    stores.authStrategies = new AuthStrategies();
  
    // Calls `strategyExtraStores()` for each extra strategy
    async.eachSeries(
      Object.keys( hotplate.config.get('hotCoreAuth.strategies', {} )),
      function( strategyName, cb ){

        var strategyExtraStores = require( './auth/' + strategyName ).extraStores;
        if( ! strategyExtraStores ) return cb( null );

        strategyExtraStores( stores, function( err ){
          if( err ) return cb( err );

          // That's it -- end of the function.
          cb( null);
        });
      },
      function( err ){
        if( err ) return done( err );

        done( null, stores );
      }
    );

  });
}))



/**
Sets recover URL `/recover/:recoverToken` (for token recovery).  
Also goes through the list of `AuthStrategies`, loads the right
files in `auth/{strategy name}.js` (e.g. {{#crossLink "hotCoreAuth.facebook"}}{{/crossLink}}), and runs them.
This basically ensures that all strategies have the right URLs all set for them to work.

@event setRoutes
*/
hotplate.hotEvents.onCollect( 'setRoutes', hotplate.cachable( function( app, done ){

  hotCoreStoreRegistry.getAllStores( function( err, stores ){
    if( err ) return done( err ); 

    app.get( prefix( '/recover/:recoverToken' ), function( req, res, next ){
  
      stores.users.dbLayer.selectByHash( { conditions: { recoverToken: req.params[ 'recoverToken' ] } }, { children: true }, function( err, result ){
        if( err ) return done( err );
      
        if( result.length == 0 ){
          // Artificially create a TokenInvalid error, and next( err ) it 
          var error = new Error();
          error.name = "TokenInvalidError";
          error.message = "Token not valid!";
          req.hotError = error;
          return next( error );
        } 
      
        var user = result[0];

        if( ! user.recoverTokenCreated ){

          // Artificially create a TokenDateInvalid error, and next( err ) it 
          var error = new Error();
          error.name = "TokenDateInvalidError";
          error.message = "Token date invalid!";
          req.hotError = error;
          return next( error );
        }

        // Get the important variables 
        var tokenAgeInSeconds = Math.round( ( (new Date() ) - user.recoverTokenCreated ) / 1000 );
        var recoverURLexpiry = hotplate.config.get( 'hotCoreAuth.recoverURLexpiry' ); 

        var tokenIsGood = tokenAgeInSeconds < recoverURLexpiry;

        if( ! tokenIsGood ){

          // Artificially create a TokenExpired error, and next( err ) it 
          var error = new Error();
          error.name = "TokenExpiredError";
          error.message = "Token expired!";
          req.hotError = error;
          return next( error );
        }
  
        delete user.recoverToken;
        delete user.recoverTokenCreated;

        stores.users.dbLayer.updateById( user.id, { recoverToken: undefined, recoverTokenCreated: undefined }, function( err ){    
          if( err ) return next( err );

          // Log the user in using the token!
          req.session.loggedIn = true;
          req.session.userId = user.id;

          // Redirect to the right URL
          res.redirect( hotplate.config.get('hotCoreAuth.redirectURLs.success.recover') );
        });

       
      });
    }); 
  
    // Calls `strategyExtraStores()` for each extra strategy
    async.eachSeries(
      Object.keys( hotplate.config.get('hotCoreAuth.strategies', {} )),
      function( strategyName, cb ){
  
        var strategyRoutesMaker = require( './auth/' + strategyName ).strategyRoutesMaker;
        if( ! strategyRoutesMaker ) return cb( null );

        strategyRoutesMaker( app, strategyName, function( err ){
          if( err ) return cb( err );

          // That's it -- end of the function.
          cb( null);
        });
      },
      function( err ){
        if( err ) return done( err );

        done( null );
      }
    );

  });

}))


hotplate.hotEvents.onCollect( 'pageElements', 'hotCoreAuth', function( done ){
  var strategyIds = Object.keys( hotplate.config.get('hotCoreAuth.strategies') ) || [];
  
  done( null, {
    vars: [
            { name: 'strategyIds',  value: strategyIds },
            { name: 'successURLs',  value: hotplate.config.get('hotCoreAuth.redirectURLs.success') },
            { name: 'failURLs',     value: hotplate.config.get('hotCoreAuth.redirectURLs.fail') },
          ],
  });
});


hotplate.hotEvents.onCollect( 'pageElementsPerPage', 'hotCoreAuth', function( req, pageName, done ){

  var vars = [];

  // Add the user ID to the page as a variable
  if( req.session.userId ) {
    vars.push( { name: 'userId', value: req.session.userId } );
  }

  done( null, {
    vars: vars 
  });

});


