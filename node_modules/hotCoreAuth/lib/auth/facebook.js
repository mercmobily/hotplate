"use strict";

var dummy
  , hotplate = require('hotplate')

  , hat = require('hat')

  , passport = require('passport')
  , FacebookStrategy = require('passport-facebook').Strategy
;


/**
@class hotCoreAuth.facebook
@static
*/

/**
Implements the ExpressJs routes to make the Facebook strategy work.  
It implements:

  * Manager: `/auth/manager/facebook`, `/auth/manager/facebook/callback`
  * Signin: `/auth/signin/facebook`, `/auth/manager/signin/callback`
  * Recover: `/auth/recover/facebook`, `/auth/manager/recover/callback`
  * Register: `/auth/register/facebook`, `/auth/manager/register/callback`
  * Resume: `/auth/resume/facebook`, `/auth/manager/resume/callback`

@method hotCoreAuth.facebook
*/


exports = module.exports = function( app, strategyConfig,  makeResponder, authStrategies, users, userStrategies, userLogins ) {

  // Work out callbackURLBase which needs to be honoured
  var callbackURLBase = hotplate.config.get( 'hotCoreAuth.callbackURLBase' );

  // ***********************
  // *** MANAGER         ***
  // ***********************

  passport.use('facebook-manager', new FacebookStrategy({
    clientID: strategyConfig.clientID,
    clientSecret: strategyConfig.clientSecret,
    callbackURL: callbackURLBase + "/auth/manager/facebook/callback",
    passReqToCallback: true,
  },

  function(req, accessToken, refreshToken, profile, done) {


    if( ! req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( typeof( profile ) === 'undefined' || ! profile.id ){ 
         return done( null, false, { message: "Facebook didn't return a profile ID, procedure aborted" } );
      }

      // Check that "facebook" isn't already there
      userStrategies.apiGetQuery( { conditions: { userId: req.session.userId, strategyId: 'facebook' } }, function( err, res ){
        if( err ) {
          done( err, null );
        } else {
          if( res.length ){
            done( null, false, { message: "User already has a Facebook login setup" } );
          } else {
            
            // Check that "facebook" isn't already there
            userStrategies.apiGetQuery( { conditions: { field1: profile.id } }, function( err, res ){
              if( err ) {
                done( err, null );
              } else {
                if( res.length ){
                  done( null, false, { message: "Facebook profile already linked to another account" } );
                } else {

                  userStrategies.apiPost( { userId: req.session.userId, strategyId: 'facebook', field1: profile.id }, function( err, res ){
                    if( err ) {
                      done( err, null );
                    } else {
                      users.apiGet( req.session.userId, function( err, user ){
                        if( err ){
                          done( err, null );
                        } else {
                          done( null, user, profile  );
                        }
                      });
                    }
                  });

                }
              }
           });
            
          } 
        }
      });
    }
  }
  ));

  app.get('/auth/manager/facebook', passport.authenticate('facebook-manager'));
  app.get('/auth/manager/facebook/callback', function( req, res, next) {
    passport.authenticate('facebook-manager',  makeResponder( req, res, next, 'facebook', 'manager')  )(req, res, next);
  });


  // ***********************
  // *** SIGN IN         ***
  // ***********************

  passport.use('facebook-signin', new FacebookStrategy({
    clientID: strategyConfig.clientID,
    clientSecret: strategyConfig.clientSecret,
    callbackURL: callbackURLBase + "/auth/signin/facebook/callback",
    passReqToCallback: true,
  },

  function(req, accessToken, refreshToken, profile, done) {

    if( req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( typeof( profile ) === 'undefined' || ! profile.id ){ 
         return done( null, false, { message: "Facebook didn't return a profile ID, procedure aborted" } );
      }

      userStrategies.apiGetQuery( { conditions: { strategyId: 'facebook', field1: profile.id } }, function( err, res ){
        if( err ) {
          done( err, null );
        } else {

          if( res.length ){
            users.apiGet( res[0].userId, function( err, user ){
              if( err ){
                done( err, null );
              } else {
                req.session.loggedIn = true;
                req.session.userId = user.id;
                done( null, user, profile  );
              }
            });

          } else {
            done( null, false, { message: "Your Facebook user is not registered" } );
          }
        }
      });

    }

    // done( null, false );
  }
  ));

  app.get('/auth/signin/facebook', passport.authenticate('facebook-signin'));
  app.get('/auth/signin/facebook/callback', function( req, res, next) {
    passport.authenticate('facebook-signin',  makeResponder( req, res, next, 'facebook', 'signin')  )(req, res, next);
  });

  // ***********************
  // *** RECOVER         ***
  // ***********************

  passport.use('facebook-recover', new FacebookStrategy({
    clientID: strategyConfig.clientID,
    clientSecret: strategyConfig.clientSecret,
    callbackURL: callbackURLBase + "/auth/recover/facebook/callback",
    passReqToCallback: true,
  },

  function(req, accessToken, refreshToken, profile, done) {

    if( req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( typeof( profile ) === 'undefined' || ! profile.id ){ 
         return done( null, false, { message: "Facebook didn't return a profile ID, procedure aborted" } );
      }

      userStrategies.apiGetQuery( { conditions: { strategyId: 'facebook', field1: profile.id } }, function( err, res ){
        if( err ) {
          done( err, null );
        } else {

          if( res.length ){
            users.apiGet( res[0].userId, function( err, user ){
              if( err ){
                done( err, null );
              } else {
                // RECOVER PROCEDURE
                
                // Create the recoveryToken
                user.recoverToken = hat();
                user.recoverTokenCreated = new Date();

                // Place the token in the user's record
                users.apiPut( user.id, user, { killComet: true }, function( err, newUser ){
                  if( err ){
                    done( err, null );
                  } else {
                    done( null, false, { message: "Recovery procedure initiated" }  );
                  }
                } );

              }
            });
          } else {
            done( null, false, { message: "Your Facebook user is not registered" } );
          }
        }
      });


    }

  }
  ));

  app.get('/auth/recover/facebook', passport.authenticate('facebook-recover'));
  app.get('/auth/recover/facebook/callback', function( req, res, next) {
    passport.authenticate('facebook-recover',  makeResponder( req, res, next, 'facebook', 'recover')  )(req, res, next);
  });


  // ***********************
  // *** REGISTER        ***
  // ***********************

  passport.use('facebook-register', new FacebookStrategy({
    clientID: strategyConfig.clientID,
    clientSecret: strategyConfig.clientSecret,
    callbackURL: callbackURLBase + "/auth/register/facebook/callback",
    passReqToCallback: true,
  },

  function(req, accessToken, refreshToken, profile, done) {

    if( req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( typeof( profile ) === 'undefined' || ! profile.id ){ 
         return done( null, false, { message: "Facebook didn't return a profile ID, procedure aborted" } );
      }

      // Check that "facebook" isn't already there
      userStrategies.apiGetQuery( { conditions: { strategyId: 'facebook', field1: profile.id } }, function( err, res ){
        if( err ) {
          done( err, null );
        } else {
          if( res.length ){
            done( null, false, { message: "Facebook profile already registered" } );
          } else {
            users.apiPost( { }, { killComet: true }, function( err, user ){

              if( err ){
                done( err, null );
              } else {

                userStrategies.apiPost( { userId: user.id, strategyId: 'facebook', field1: profile.id }, { killComet: true}, function( err, res ){
                  if( err ) {
                    done( err, null );
                  } else {

                    // User just registered: make her "logged in"
                    req.session.loggedIn = true;
                    req.session.userId = res.userId;

                    done( null, user, profile );
                  }

                });
              }

            });

          } 
        }
      });
    }

  }
  ));

  app.get('/auth/register/facebook', passport.authenticate('facebook-register'));
  app.get('/auth/register/facebook/callback', function( req, res, next) {
    passport.authenticate('facebook-register',  makeResponder( req, res, next, 'facebook', 'register')  )(req, res, next);
  });



  // ***********************
  // *** RESUME          ***
  // ***********************

  passport.use('facebook-resume', new FacebookStrategy({
    clientID: strategyConfig.clientID,
    clientSecret: strategyConfig.clientSecret,
    callbackURL: callbackURLBase + "/auth/resume/facebook/callback",
    passReqToCallback: true,
  },

  function(req, accessToken, refreshToken, profile, done) {

    if( req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( typeof( profile ) === 'undefined' || ! profile.id ){ 
         return done( null, false, { message: "Facebook didn't return a profile ID, procedure aborted" } );
      }

      userStrategies.apiGetQuery( { conditions: { strategyId: 'facebook', field1: profile.id } }, function( err, res ){
        if( err ) {
          done( err, null );
        } else {

          if( res.length ){
            users.apiGet( res[0].userId, function( err, user ){
              if( err ){
                done( err, null );
              } else {
                req.session.loggedIn = true;
                req.session.userId = user.id;
                profile.message = "Logged back in!";

                done( null, user, profile  );
              }
            });

          } else {
            done( null, false, { message: "Your Facebook user is not registered" } );
          }
        }
      });

    }

    // done( null, false );
  }
  ));

  app.get('/auth/resume/facebook', passport.authenticate('facebook-resume'));
  app.get('/auth/resume/facebook/callback', function( req, res, next) {
    passport.authenticate('facebook-resume',  makeResponder( req, res, next, 'facebook', 'resume')  )(req, res, next);
  });


} 
