"use strict";

var dummy
  , hotplate = require('hotplate')

  , passport = require('passport')
  , LocalStrategy = require('passport-local').Strategy
  , hat = require('hat')
  , bcrypt = require('bcrypt')

;


var SALT_WORK_FACTOR = 15;

var exports = module.exports = function( app, strategyConfig, makeResponder, authStrategies, users, userStrategies, userLogins ) {


  // ***********************
  // *** MANAGER         ***
  // ***********************

  passport.use('local-manager', new LocalStrategy({
    passReqToCallback: true,
    usernameField: 'login',
  },

  function(req, login, password, done) {

    if( ! req.session.loggedIn ) return  done( null, false );


    // Check that there isn't one already there
    userStrategies.dbLayer.selectByHash( { conditions: { userId: req.session.userId, strategyId: 'local' } }, { children: true }, function( err, res ){
      if( err ) {
        done( err, null );
      } else {
        if( res.length ){

          var itsEdit = true;
          var existingPassword = res[0].field3;
          var foundStrategyId = res[0].id;
        }

        userStrategies.dbLayer.selectByHash( { conditions: { field1: login.toLowerCase() } }, function( err, res ){


          function complete( userStrategiesId ){
            users.dbLayer.selectById( req.session.userId, function( err, user ){
              if( err ){
                done( err, null );
              } else {
                user.userStrategiesId = userStrategiesId;
                done( null, user, {}  );
              }
            });
          }


          if( err ) {
            done( err, null );
          } else {

            var editingSelf = false;
            if( res.length > 0 ){
              editingSelf = ( itsEdit == true && res[0].id.toString() == foundStrategyId.toString()  );
            }

            if( res.length > 0 && !editingSelf ){
              done( null, false, { message: "Login name taken!" } );
            } else {

              // It's an edit: overwrite existing values
              if( itsEdit ){

                // If the password is a '*', then it will retain the existing password
                if( password == '*' ) password = existingPassword;

                userStrategies.dbLayer.updateById( foundStrategyId, { userId: req.session.userId, strategyId: 'local', field1: login.toLowerCase(), field3: password }, function( err, res ){
                  if( err ) {
                    done( err, null );
                  } else {
                    complete( res.id );
                  }
                });
 

              // It's a new entry: add a new record
              } else {

                userStrategies.apiPost( { userId: req.session.userId, strategyId: 'local', field1: login.toLowerCase(), field3: password }, function( err, res ){
                  if( err ) {
                    done( err, null );
                  } else {
                    complete( res.id );
                  }
                });
              }


            }
          } 
        });
      }
    });
  }
  ));

  app.post('/auth/manager/local', function( req, res, next) {
    passport.authenticate('local-manager',  makeResponder( req, res, next, 'local', 'manager')  )(req, res, next);
  });
         

  // ***********************
  // *** SIGN IN         ***
  // ***********************
 
  passport.use('local-signin', new LocalStrategy({
    passReqToCallback: true,
    usernameField: 'login',
  },

  function(req, login, password, done) {

    userStrategies.dbLayer.selectByHash( { conditions: { field1: login.toLowerCase(), field3: password } }, function( err, res ){
      if( err ) {
        done( err, null );
      } else {
        if( res.length ){
          
          req.session.loggedIn = true;
          req.session.userId = res[0].userId;

          done( null, true );
        } else {
          done( null, false );
        }
      }
    });

  }
  ));

  app.post('/auth/signin/local', function( req, res, next) {
    passport.authenticate('local-signin',  makeResponder( req, res, next, 'local', 'signin')  )(req, res, next);
  });

  // ***********************
  // *** RECOVER         ***
  // ***********************

  passport.use('local-recover', new LocalStrategy({
    passReqToCallback: true,
    usernameField: 'login',
  },

  function(req, login, password, done) {

    if( req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( login == '' ){
         return done( null, false, { message: "Username cannot be empty" } );
      }

      // Check that "local" isn't already there
      userStrategies.dbLayer.selectByHash( { conditions: { strategyId: 'local', field1: login.toLowerCase() } }, { children: true }, function( err, res ){
        if( err ) {
          done( err, null );
        } else {
          if( ! res.length ){
            done( null, false, { message: "Username not found" } );
          } else {

            users.dbLayer.selectById( res[0].userId, function( err, user ){
              if( err ){
                done( err, null );
              } else {

                // Create the recoveryToken
                user.recoverToken = hat();
                user.recoverTokenCreated = new Date();

                // Place the token in the user's record
                users.dbLayer.updateById( user.id, user, function( err, newUser ){
                  if( err ){
                    done( err, null );
                  } else {
                    done( null, false, { message: "Recovery procedure initiated" }  );
                  }
                } );


              }
            });


          }
        }
      });
    }

  }
          


 
  ));

  app.post('/auth/recover/local', function( req, res, next) {
    passport.authenticate('local-recover',  makeResponder( req, res, next, 'local', 'recover')  )(req, res, next);
  });



  // ***********************
  // *** REGISTER        ***
  // ***********************
 
  passport.use('local-register', new LocalStrategy({
    passReqToCallback: true,
    usernameField: 'login',
  },

  function(req, login, password, done) {

    if( req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( login == '' ){
         return done( null, false, { message: "Username cannot be empty" } );
      }

      // Check that "local" isn't already there
      userStrategies.dbLayer.selectByHash( { conditions: { strategyId: 'local', field1: login.toLowerCase() } }, { children: true }, function( err, res ){
        if( err ) {
          done( err, null );
        } else {
          if( res.length ){
            done( null, false, { message: "Username taken" } );
          } else {
              users.dbLayer.insert( {}, { returnRecord: true }, function( err, user ){

              if( err ){
                done( err, null );
              } else {

                userStrategies.dbLayer.insert( { userId: user.id, strategyId: 'local', field1: login.toLowerCase(), field3: password }, { returnRecord: true }, function( err, res ){
                  if( err ) {
                    done( err, null );
                  } else {

                    // User just registered: make her "logged in"
                    req.session.loggedIn = true;
                    req.session.userId = res.userId;

                    done( null, user );
                  }

                });
              }

            });

          }
        }
      });
    }

  }
           
  ));

  app.post('/auth/register/local', function( req, res, next) {
    passport.authenticate('local-register',  makeResponder( req, res, next, 'local', 'register')  )(req, res, next);
  });


  // ***********************
  // *** RESUME          ***
  // ***********************
 
  passport.use('local-resume', new LocalStrategy({
    passReqToCallback: true,
    usernameField: 'login',
  },

  function(req, login, password, done) {


    userStrategies.dbLayer.selectByHash( { conditions: { field1: login.toLowerCase(), field3: password } }, function( err, res ){
      if( err ) {
        done( err, null );
      } else {
        if( res.length ){
          req.session.loggedIn = true;
          req.session.userId = res[0].userId;
          done( null, true );
        } else {
          done( null, false );
        }
      }
    });

  }
  ));

  app.post('/auth/resume/local', function( req, res, next) {
    passport.authenticate('local-resume',  makeResponder( req, res, next, 'local', 'resume')  )(req, res, next);
  });



 
}
