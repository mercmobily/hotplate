"use strict";

var dummy
  , hotplate =  require('hotplate')
  , declare = require( 'simpledeclare' )
  , SimpleDbLayer = require( 'simpledblayer' )
  , SimpleSchema = require( 'simpleschema' )
  , JsonRestStores = require( 'jsonreststores' )

  , hotCoreStoreRegistry = require('hotCoreStoreRegistry')
  , hotCoreMultiHome = require('hotCoreMultiHome')
  , hotCoreServerLogger = require( 'hotCoreServerLogger' )
;

exports.get = function( done ){

  var classes = {};
  var sharedValidators = {};

  hotplate.hotEvents.emit('sharedFunctions', function( err, sharedFunctions) {
    if( err ){
      done( err );
    } else {

      // Gets the results, and adds them to the sharedValidators hash which
      // will then get used
      sharedFunctions.onlyResults().forEach( function( functions ){
        for( var k in functions ){
          // If it ends with "Validator", then it's a validator
          if( k.indexOf('Validator', k.length - 'Validator'.length) !== -1 ){
            sharedValidators[ k ] = functions[ k ];
          }
        }
      });

      classes.HotSchemaMixin = declare( null, {

        sharedValidatorTypeParam: function( p ){
          if( typeof( p.parameterValue ) !== 'string' )
            throw( new Error("Validator needs to be a string, found: " + typeof( p.parameterValue ) ) );

     
          var f = sharedValidators[ p.parameterValue + "Validator" ];
 
          if( f && ! f( p.value ) ){
            var msg = f( false );
            p.errors.push( { field: p.fieldName, message: msg, mustChange: true } );
          }
        }
      });

      // Basic schema with info defined in config
      classes.BasicSchema = declare( [ SimpleSchema, hotplate.config.get( 'hotplate.SchemaMixin') ] );

      // Advanced schema mixin with validators
      classes.HotSchema = declare( [ classes.BasicSchema, classes.HotSchemaMixin ] );


      classes.HotStoreMixin = declare( null, {

        killComet: false,
        chainErrors: 'all',

        hotGlobalBroadcast: false,

        echoAfterPutNew: true,
        echoAfterPutExisting: true,
        echoAfterPost: true,

        handleDelete: false,

        logError: function( error ){
          hotCoreServerLogger.log( error );
        },

        _getTabId: function( req ){

          // If the tab header wasn't there, then there is no way to broadcast -- abord
          if( typeof( req ) === 'undefined' ) return null;

          var tabId = req.headers['x-hotplate-tabid'];
          if( tabId == '' ){
            tabId = null;
          }
          return tabId; 
        },


        // This function can be used to trigger a change event manually after a non-store change to the DB
        // ---
        // In `options`, the following are worked out from `request` if they aren't set:
        // * `options.userId`
        // * `options.tabId`
        // * `options.beforeId

        broadcastStoreChanges: function( request, type, objectId, object, options, cb ){

          var userId, tabId;
          var makeTabIdHash;
          var message;

          // No comet required (from the option, or for the store's own request
          if( this.killComet || request.killComet ) return cb( null );

          // Make up basic message variable
          message = { type: type, storeName: this.storeName, targetId: objectId, target: object };

          // userId, tabId, beforeId are inferred from `request` if 
          // they weren't passed
          if( typeof( options.userId ) === 'undefined' ){
            userId = request._req && request._req.session && request._req.session.userId || undefined;
          } else {
            userId = options.tabId;
          }
          if( typeof( options.tabId ) === 'undefined' ){
            tabId = this._getTabId( request._req );
          } else {
            tabId = options.tabId;
          }
          if( typeof( options.beforeId ) === 'undefined' ){

            // Work out beforeId, either from putBefore (which will have an ID)
            // or from putDefaultPosition (if set to "end", beforeId will be `null`
            //
            // NOTE: original dstore Rest calls where defaultNewToStart and beforeId aren't set (most
            // common case) will STILL end up with options.beforeId set to NULL in the broadcast.
            // This is fine, since options.beforeId === null AND 
            // ( options.beforeId === undefined && ! defaultNewToStart) are fully equivalent
            if( typeof( request.options.putBefore ) !== 'undefined' ){
              message.beforeId = request.options.putBefore;
            } else {
              if( request.options.putDefaultPosition  === 'end' ) message.beforeId = null;  
            }
          }

          // makeTabIdHash will be passed depending on hotCoreMultiHome
          if( hotplate.config.get( 'hotCoreMultiHome.enabled' ) ) makeTabIdHash = hotCoreMultiHome.makeTabIdHashForMultihome;
          

          // Enrich message with options passed
          // NOTE: setting an option as `undefined` will have the effect of DELETING it
          // from the message.
          // ALSO: tabId and userId are _not_ copied over to the messages as they would be redundant
          for( var k in options ){
            if( typeof( options[ k ]) === 'undefined' ){
              delete message[ k ];
            } else {
              if( k !== 'tabId' && k !== 'userId' ) message[ k ] = options[ k ];
            }
          }

          hotplate.hotEvents.emit('cometBroadcast', userId, tabId, makeTabIdHash, message, cb );
        },

        // `request` here is used for positioning headers (request.options.putBefore/putDefaultPosition)
        _broadcast: function( request, type, objectId, object, cb ){

          var options = {};

          this.broadcastStoreChanges( request, type, objectId, object, options, cb );

        },

        afterPutExisting: function afterPutExisting( request, doc, fullDoc, docAfter, fullDocAfter, overwrite, done){
          var self = this;

          this.inheritedAsync( afterPutExisting, arguments, function( err ){
            if( err ) return done( err );

            self._broadcast( request, 'storeRecordUpdate', docAfter[ self.idProperty], docAfter, done );
          });
        },    

        afterPost: function afterPost( request, doc, fullDoc, done ){
          var self = this;
          this.inheritedAsync( afterPost, arguments, function( err ){
            if( err ) return done( err );

            self._broadcast( request, 'storeRecordCreate', doc[ self.idProperty], doc, done );
          });
        },

        afterPutNew: function afterPutNew( request, doc, fullDoc, overwrite, done ){
          var self = this;
          this.inheritedAsync( afterPutNew, arguments, function( err ){
            if( err ) return done( err );

            self._broadcast( request, 'storeRecordCreate', doc[ self.idProperty], doc, done );
          });
        },

        afterDelete: function afterDelete( request, doc, fullDoc, done ){
          var self = this;
          this.inheritedAsync( afterDelete, arguments, function( err ){
            if( err ) return done( err );

            self._broadcast( request, 'storeRecordRemove', doc[ self.idProperty ], doc, done ); 
          });
        },    

      });


      // Sets the DB Layer
      var DbLayer = declare([ SimpleDbLayer, hotplate.config.get('hotplate.DbLayerMixin') ], {
        db: hotplate.config.get( 'hotplate.db' ) 
      });

      // Creates a basic DB store based on that layer
      classes.BasicDbStore = declare( JsonRestStores, {
        DbLayer: DbLayer,
      });

      // Creates the HotStore: the basic DB store with HotStoreMixin
      classes.HotStore = declare( [ classes.BasicDbStore, classes.HotStoreMixin ]);

      done( null, classes );

    }
  });

}


/*
  IN SHORT:
  * To WRITE (putExisting, putNew, post, delete), userId needs to match logged in user
*/
exports.BasicPermissionsMixin = declare( null, {

  _checkUserId: function( request, cb ){
    if( request.params.userId ){

      if( ! self._req.session.userId ) return cb( new self.UnauthorizedError() );

      if( request.params.userId.toString() !== request._req.session.userId ){
        cb( null, false );
      } else {
        cb( null, true );
      }
    } else {
      cb( null, true );
    }
        
  },

  checkPermissionsPost: function checkPermissionsPost( request, cb ){
    var self = this;

    this.inheritedAsync( checkPermissionsPost, arguments, function( err, res ){
      if( err ){
        cb( err );
      } else {
        if( ! res ){
          cb( null, false );
        } else {
          self._checkUserId( request, cb );
        }
      }
    });
  },
  checkPermissionsPutNew: function checkPermissionsPutNew( request, cb ){
    var self = this;

    this.inheritedAsync( checkPermissionsPutNew, arguments, function( err, res ){
      if( err ){
        cb( err );
      } else {
        if( ! res ){
          cb( null, false );
        } else {
          self._checkUserId( request, cb );
        }
      }
    });
  },
  checkPermissionsPutExisting: function checkPermissionsPutExisting( request, doc, fullDoc, cb ){
    var self = this;

    this.inheritedAsync( checkPermissionsPutExisting, arguments, function( err, res ){
      if( err ){
        cb( err );
      } else {
        if( ! res ){
          cb( null, false );
        } else {
          self._checkUserId( request, cb );
        }
      }
    });
  },
  checkPermissionsDelete: function checkPermissionsDelete( request, doc, fullDoc, cb ){
    var self = this;

    this.inheritedAsync( checkPermissionsDelete, arguments, function( err, res ){
      if( err ){
        cb( err );
      } else {
        if( ! res ){
          cb( null, false );
        } else {
          self._checkUserId( request, cb );
        }
      }
    });
  },


});

/*
  IN SHORT:
  * To READ (get, getQuery), userId needs to match logged in user
*/
exports.PrivateUserDataPermissionsMixin = declare( null, {

  _checkUserIdForJsonRestStores: function( request, cb ){
    var self = this;

    if( ! request._req.session.userId ) return cb( new self.UnauthorizedError() );

    if( request.params.userId ){

      if( request.params.userId.toString() !== request._req.session.userId.toString() ){
        cb( null, false );
      } else {
        cb( null, true );
      }
    } else {
      cb( null, true );
    }
        
  },

  checkPermissionsGet: function checkPermissionsGet( request, doc, fullDoc, cb ){
    var self = this;

    this.inheritedAsync( checkPermissionsGet, arguments, function( err, res ){
      if( err ){
        cb( err );
      } else {
        if( ! res ){
          cb( null, false );
        } else {
          self._checkUserIdForJsonRestStores( request, cb );
        }
      }
    });
  },
  checkPermissionsGetQuery: function checkPermissionsGetQuery( request, cb ){
    var self = this;

    this.inheritedAsync( checkPermissionsGetQuery, arguments, function( err, res ){
      if( err ){
        cb( err );
      } else {
        if( ! res ){
          cb( null, false );
        } else {
          self._checkUserIdForJsonRestStores( request, cb );
        }
      }
    });
  },
 
});



