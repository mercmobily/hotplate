{
    "project": {
        "name": "Hotplate's API",
        "description": "Hotplate: a framework to create SaaS, the lightning-fast way",
        "version": "1.2.1",
        "url": "http://hotplatejs.com/"
    },
    "files": {
        "hotplate/node_modules/hotCoreAuth/lib/auth/facebook.js": {
            "name": "hotplate/node_modules/hotCoreAuth/lib/auth/facebook.js",
            "modules": {},
            "classes": {
                "hotCoreAuth.facebook": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "hotplate/node_modules/hotCoreAuth/lib/auth/local.js": {
            "name": "hotplate/node_modules/hotCoreAuth/lib/auth/local.js",
            "modules": {},
            "classes": {
                "hotCoreAuth.local": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "hotplate/node_modules/hotCoreAuth/lib/hotCoreAuth.js": {
            "name": "hotplate/node_modules/hotCoreAuth/lib/hotCoreAuth.js",
            "modules": {
                "hotCoreAuth": 1
            },
            "classes": {
                "hotCoreAuth": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "hotplate/node_modules/hotCoreClientFiles/lib/hotCoreClientFiles.js": {
            "name": "hotplate/node_modules/hotCoreClientFiles/lib/hotCoreClientFiles.js",
            "modules": {
                "hotCoreClientFiles": 1
            },
            "classes": {
                "hotCoreClientFiles": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "hotplate/node_modules/hotCoreMultiHome/lib/hotCoreMultiHome.js": {
            "name": "hotplate/node_modules/hotCoreMultiHome/lib/hotCoreMultiHome.js",
            "modules": {
                "hotCoreMultiHome": 1
            },
            "classes": {
                "hotCoreMultiHome": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "hotplate/node_modules/hotCorePage/lib/Vars.js": {
            "name": "hotplate/node_modules/hotCorePage/lib/Vars.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "hotplate/node_modules/hotCoreTransport/lib/hotCoreTransport.js": {
            "name": "hotplate/node_modules/hotCoreTransport/lib/hotCoreTransport.js",
            "modules": {
                "hotCoreTransport": 1
            },
            "classes": {
                "hotCoreTransport": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "hotCoreAuth": {
            "name": "hotCoreAuth",
            "submodules": {},
            "classes": {
                "hotCoreAuth.facebook": 1,
                "hotCoreAuth.local": 1,
                "hotCoreAuth": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "hotplate/node_modules/hotCoreAuth/lib/hotCoreAuth.js",
            "line": 21,
            "description": "Provides authentication abilities to Hotplate.\nTODO:\n* Document each sub-module: Data management for each authentication system\n* Make all page-generating functions configurable\n* Document defaults and configuration\nThis module provides authentication abilities to your application by:\n* Defining authentication stores to be used in your app\n* Creating authentication routes to handle authentication using Passport"
        },
        "hotCoreClientFiles": {
            "name": "hotCoreClientFiles",
            "submodules": {},
            "classes": {
                "hotCoreClientFiles": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "hotplate/node_modules/hotCoreClientFiles/lib/hotCoreClientFiles.js",
            "line": 18,
            "description": "Module to handle the delivery of files made available by modules",
            "itemtype": "main"
        },
        "hotCoreMultiHome": {
            "name": "hotCoreMultiHome",
            "submodules": {},
            "classes": {
                "hotCoreMultiHome": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "hotplate/node_modules/hotCoreMultiHome/lib/hotCoreMultiHome.js",
            "line": 3,
            "description": "Provides multi-home abilities to Hotplate\n\nThis module's aim is to make sure Hotplate has full multi-home abilities. The module itself:\n\n* Defines all of the relevant stores ( `workspaces`, `workspacesUsers`, `usersWorkspaces`)\n* Places important variables on the rendered page ( `vars.hotCoreMultiHome.enabled` and `.multiHomeURL`)\n* Places the crucial `vars.hotCoreMultiHome.workspaceId` variable on the rendered page\n\nHowever, given the nature of this module, there are _several_ other modules in Hotplate that interact with it.\n\n## SUMMARY: modules that deal with multihome environments:\n\n* hotCoreJsonRestStores -- it will broadcast comet messages only to workspace users\n* hotCoreStoreConfig -- if the url has `:workspaceId`, it will set config stores' records in the page for that workspace\n* hotDojoGlobals -- will set global variable workspaceId if it's set within the page\n* hotDojoStoreConfig -- will call `stores()` passing `userId` and `workspaceId` in resolution hash, allowing easy workspace-bound setting lists\n* hotDojoAppContainer -- fully multi-home aware, will hook to correct URL and, if `:workspaceId` is in the URL, it will check that it exists.\n* hotDojoAuth -- fully multi-home aware, providing a pick mechanism etc. Gets the workspace URL from `vars.hotCoreMultiHome.multiHomeURL` \n\n* hotDojoComet -- will add header `X-hotplate-workspaceId` to tab messages requests\n* hotCoreComet -- will use `X-hotplate-workspaceId` to return updated config records for the expired workspace\n\nA more detailed explanation of what each module does, in terms of interaction with hotCoreMultiHome, follows. Note that any interaction happens on the basis that `hotCoreMultiHome` is enabled.\n\n## hotCoreJsonRestStores\n\n* ./node_modules/hotCoreJsonRestStores/lib/hotCoreJsonRestStores.js\n\nWhen broadcasting changes to stores via the hook `cometBroadcast`, it will change its behavious depending on multi-home being enabled or not.\n\nIf multiHome is enabled, checks if the record has a workspaceId field -- in which case, it will only broadcast the message to users in that workspaceId (it will do so by passing a `makeTabIdHash()` function to the `cometBroadcast` hook) \n\n## hotCoreStoreConfig\n\n* ./node_modules/hotCoreStoreConfig/lib/hotCoreStoreConfig.js\n\nImplements `pageElementsPerPage` that passes `params.workspaceId` to `getConfig()` -- which means that if the URL has the `workspaceId` parameter, it will add a variable with the workspace's configuration to the page. It also passes `session.userId` to `getConfig()`, so if the user is logged in, it will return that user's config too.\n\nNOTE: `getConfig()` is implemented here. Signature: `function( workspaceId, userId, cb )`. It basically will return all configs with `workspaceId` and/or `userId` set in their `store.configStore` property\n\n## hotDojoGlobals\n\n* ./node_modules/hotDojoGlobals/client/globals.js\n\nSets the global variable `workspaceId` based on `vars.hotCoreMultiHome.workspaceId` (Unrelated: it also sets `userId` based in `vars.hotCoreAuth.userId`)\n\n## hotDojoStoreConfig\n\n* ./node_modules/hotDojoStoreConfig/client/ConfigVars.js\n\nConfig variables are bound to \"nothing\" (system-wide settings), to a user (user-wide settings), to a workspace (workspace-wide settings) or both (user-specific settings for a specific workspace). That's why ConfigVars will call `stores()` passing `:userId` and :`workspaceId` in resolution hash.\n\nNote that `:workspaceId` and `userId` are the ONLY parameters allowed in a config store URL.\n\n\n## hotDojoAppContainer\n\n* ./node_modules/hotDojoAppContainer/lib/hotDojoAppContainer.js\n\nIn terms of URLs, it will attach to `hotCoreMultiHome.multiHomeURL` or `hotCoreAuth.appURL` depending on multi-home being enabled or not. Also, IF `:workspaceId` is in the URL as a parameter, it will check that the workspace actually exists or it will return an error.\n\n## hotDojoAuth\n\n* ./node_modules/hotDojoAuth/lib/hotDojoAuth.js\n\nThe pagePick callback is there just for multi-home environments, picking the workspace\n\n* ./node_modules/hotDojoAuth/client/NewWorkspace.js\n\nAfter adding a new workspace, it will redirect to it thanks to `vars.hotCoreMultiHome.multiHomeURL` (replacing `:workspaceId` with the id of the record that was just created) \n\n* ./node_modules/hotDojoAuth/client/Pick.js\n\nAfter picking a workspace, it will redirect to it thanks to `vars.hotCoreMultiHome.multiHomeURL` as above\n\n* ./node_modules/hotDojoStoreConfig/client/ConfigVars.js\n\n## hotDojoComet\n\n* ./node_modules/hotDojoComet/client/messages.js\n\nIt adds a header `X-hotplate-workspaceId` to tabId requests. This is ESSENTIAL so that hotCoreComet knows which workspaceId the tab belongs to. Yes, IT NEEDS to know it: if the tab is not found or it's expired, hotCoreComet will return only one message, `resetStores`, which will INCLUDE all configuration records for that user and workspace (in order to save GETs and implement error management app-side).\n\n## hotCoreComet\n\n* ./node_modules/hotCoreComet/lib/hotCoreComet.js\n\nUses the header `X-hotplate-workspaceId` to return the config stores' records for that `workspaceId` in case the tab is expired or not there",
            "itemtype": "main"
        },
        "hotCoreTransport": {
            "name": "hotCoreTransport",
            "submodules": {},
            "classes": {
                "hotCoreTransport": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "hotplate/node_modules/hotCoreTransport/lib/hotCoreTransport.js",
            "line": 21,
            "description": "Provides tranport functionalities (SMS an email) to hotplate modules",
            "itemtype": "main"
        }
    },
    "classes": {
        "hotCoreAuth.facebook": {
            "name": "hotCoreAuth.facebook",
            "shortname": "hotCoreAuth.facebook",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "hotCoreAuth",
            "file": "hotplate/node_modules/hotCoreAuth/lib/auth/facebook.js",
            "line": 3,
            "static": 1
        },
        "hotCoreAuth.local": {
            "name": "hotCoreAuth.local",
            "shortname": "hotCoreAuth.local",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "hotCoreAuth",
            "file": "hotplate/node_modules/hotCoreAuth/lib/auth/local.js",
            "line": 3,
            "static": 1
        },
        "hotCoreAuth": {
            "name": "hotCoreAuth",
            "shortname": "hotCoreAuth",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "hotCoreAuth",
            "namespace": "",
            "file": "hotplate/node_modules/hotCoreAuth/lib/hotCoreAuth.js",
            "line": 21,
            "description": "Authentication is based on Passport, and it's the most complex part of Hotplate.\nThere are five actions connected to authentication:\n\n* signin -- to actually login using existing credentials\n* register -- to register as a new user\n* recover -- to reset credentials\n* manager -- to manage credentials\n* resume -- to resume an existing session if authentication is expired\n\nThere are currently two implemented strategies (although it's trivial to create more):\n\n* `local` -- using simply a combination of login and password\n* `facebook` -- using Facebook's authentication scheme\n\nIn hotCoreAuth, the operation that is about to be performed is defined by the pair _strategy-action_. For example, `local-signin`, or `facebook-recover`, etc.\n\n_NOTE: `hotCoreAuth` uses passport for every authentication strategy, including `local`. This is done mainly for consistency: `local` is not a two-step authentication, and it wouldn't need Passport stricky speaking._\n\nWhile most of other authentication systems are based on username/password, and then allow you to associate other authentication methods to those username/password pairs, in hotCoreAuth _each login method is the same_. You might decide to sign up with your Facebook profile, and never bother with setting username/password or vice-versa. \n\n# How hotCoreAuth provides those functionalities\n\nWhen it's run, `hotCoreAuth` will scan the configuration object `hotCoreAuth.strategies`: each key in the object is a strategy name. For example, for `local` `hotCoreAuth` will require `auth/facebook.js` which in turn will define:\n\n* `/auth/signin/facebook`, `/auth/resume/facebook/callback`\n* `/auth/register/facebook`, `/auth/resume/facebook/callback`\n* `/auth/recover/facebook`, `/auth/resume/facebook/callback`\n* `/auth/manager/facebook`, `/auth/resume/facebook/callback`\n* `/auth/resume/facebook`, `/auth/resume/facebook/callback`\n\nEach URL will actually be managed completely by Passport.\n\n## Route definitions in `hotCoreAuth`\n\nUnderstanding exactly what happens with hotCoreAuth is crucial to fully understand Passport. I will explain here how the `facebook-signin` operation happens, step by step.\n\nFirst of all, the configuration object `hotCoreAuth.strategies` will need to have `facebook` defined as follows:\n\n    facebook: {\n      clientID: 'XXXXXXXXXXXX',\n      clientSecret: 'XXXXXXXXXX',\n    }\n\nYou will need to get those values from Facebook, as they are unique to you (you will actually need to logon to Facebook to obtain them).\n\n`hotCoreAuth` will scan `hotCoreAuth.strategies`, will find `facebook`, and will load `auth/facebook.js`.\n\nFor `signin`, `facebook.js` will first define a `named strategy` called `facebook-signin`, as well as define two routes:\n\n````\n    // STRATEGY DEFINITION\n    strategyConfig = hotplate.config.get( 'hotCoreAuth.strategies.facebook' );  \n    passport.use( 'facebook-signin', new FacebookStrategy({\n      clientID: strategyConfig.clientID,\n      clientSecret: strategyConfig.clientSecret,\n      callbackURL: callbackURLBase + \"/auth/signin/facebook/callback\",\n      passReqToCallback: true,\n    },\n\n    // This will check if `profile` is registered and therefore allowed to login\n    function customAuthentication( req, accessToken, refreshToken, profile, done ) {\n      // This function will return either\n      done( null, false, { message: \"Facebook didn't return a profile ID, procedure aborted\" } );\n      // Or:\n      done( null, false, { message: \"Your Facebook user is not registered\" } );\n      // or:\n      done( null, user, profile  );\n    }\n    ));\n\n    // FIRST ROUTE\n    app.get('/auth/signin/facebook', passport.authenticate('facebook-signin'));\n\n    // SECOND ROUTE\n    app.get('/auth/signin/facebook/callback', function( req, res, next) {\n      passport.authenticate('facebook-signin',  makeResponder( req, res, next, 'facebook', 'signin')  )(req, res, next);\n    });\n````\n\nHere is what this code does in detail.\n\nWith `passport.use( 'facebook-signin', new FacebookStrategy({`, you are registering a named strategy called `facebook-signin` with a bunch of facebook-specific parameters (`clientID`, `clientSecret`, etc.) and -- most importantly -- a callback used to check whether the `profile` returned by Facebook is actually allowed to sign in. This callback will call `done()` with the following parameters:\n\n* `err` -- as usual in node\n* `user` -- the user object, or `false` if authentication didn't work\n* `info` -- additional information\n\nThe next two lines will define two routes.\n\nThe route `/auth/signin/facebook` is managed completely by Passport, which with `passport.authenticate('facebook-signin')` returns a valid Express route. This route, which will generally be opened in a new window in your client application, will redirect to facebook.com, passing Facebook the `clientID`, `clientSecret` and `callbackURL`. At the end of the process, Facebook will then always redirect the user's browser to `/auth/signin/facebook/callback` (the callback URL provided earlier to Facebook), which is -- needless to say -- another URL managed by Passport.\n\nThis is where things get interesting.\n\nFacebook will connect to `/auth/signin/facebook/callback`, passing it information relevant to authentication: namely whether it worked or not, and -- if it did work -- the profile information. This is when passport calls the authentication callback, with the parameters `req, accessToken, refreshToken, profile, done`.  If `profile` isn't defined, then it means that Facebook authentication failed. If `profile` is set, then authentication in Facebook did work. Keep in mind that a successful Facebook login doesn't mean that that Facebook profile is allowed to signin into your application.\n\nThe route definition for the second URL can look a little confusing:\n\n    app.get('/auth/signin/facebook/callback', function( req, res, next) {\n      passport.authenticate('facebook-signin',  makeResponder( req, res, next, 'facebook', 'signin')  )(req, res, next);\n    });\n\nBasically, the whole route is delegated to Passport via `passport.authenticate()`, which will:\n\n* Receive the response from Facebook\n* Call the custom authentication function passing it `req, accessToken, refreshToken, profile, done`. The custom authentication function will call its callback with `err, user, profile`\n  * The custom authentication function will need to set `req.session.loggedIn` and `req.session.userId` if that specific Facebook profile is registered\n* Run the function _returned by `makeResponder()`_, passing it `err, user, profile`. Here where `user` and `profile` are the same values returned by the custom authentication function.\n\nThis is probably the trickiest part of hotCoreAuth: here, `makeResponder( req, res, next, strategy, action )` is a function generator, which will return a function with the right signature `(err, user, profile )`.\n\nBasically, `makeResponder()` is the function that will respond to the client, having all of Express' request/response variables (`req, res, next`) and the login information (`user, profile`).\n\n# How `makeResponder()` works\n\n`makeResponder()` is how the authentication system communicates with the client application. Interaction here is tricky, because the type of response will depend on what the client is expecting. For example, if your application allows you to click on a \"Facebook\" link, which points straight to `/auth/signin/facebook`, once the Facebook authentication process is finished you will want to be redirected to either the \"login successful\" success page, or the \"login failed\" page. If you open a new browser window for authentication, once the Facebook process is finished, you will probably want to redirect the opening window to the correct URL.\nThe client can define what `makeResponder()` will do by setting a cookie. For example, if after the Facebook authentication (happening in a newly opened window) you want to redirect the opening tab, you should create a cookie called `facebook-signin` and assign it 'redirect-opener': this will ensure that `makeResponder()` will return a page crafted so that the \"opener\" is redirected, and the tab itself is closed.\nThe cookies can be: `XXXX-signin`, `XXXX-recover`, `XXXX-register`, `XXXX-resume`, `XXXX-manager` (where `XXXX` can be `facebook`, `local`, or any other authentication strategy.\n\nHere is a list of possible response types (that is, the cookie value):\n\n* `content` -- The function returned by hotCoreAuth.responsePage is run with parameters `strategyId, action, user, profile`, and the result is then served to the client.\n\n* `close` -- If `user` is set, the window is closed immediately. If `user` isn't set and `profile` has a `message` attribute, the message is displayed with a Javascript `alert()` and the window is then closed. \n\n* `ajax` -- If `user` is set, it returns a page with status 200, and -- as contents -- a JSON string like so: `{ user: user, profile: profile }`.  If `user` isn't set, it returns a page with status `403` and a JSON string like so: `{ message: error }`\n\n* `redirect-opener` -- If `user` is set, the current window is closed and the opening window (with the main login screen) is redirected to the URL set as `hotCoreAuth.redirectURLs.success['action']`. If `user` isn't set, `profile.message` is displayed as a javascript `alert()` and the current window is closed\n\n* `redirect` -- If `user` is set, the current window redirected to the URL set as `hotCoreAuth.redirectURLs.success['action']`. If `user` isn't set, `req.session.messages` is pushed `{ type: 'error', message: profile.message }` and  the window is redirected to `hotCoreAuth.redirectURLs.fail['action']`. Note that the new page will have access to the message via the session.\n\nThe default action is `redirect`. The client application should set the relevant cookies at login time, before actioning any of the passport-related URLs.\n\n## Configuration parameters\n\n    { hotCoreAuth: {\n\n      callbackURLBase: 'http://localhost:3000',\n\n      recoverURLexpiry: 60*30, // Seconds for which the recover URL works for\n\n      // Only local strategy enabled by default\n      strategies: {\n        local: { },\n      },\n\n      redirectURLs: {\n        success: {\n          signin: path.join( hotplate.config.get( 'hotplate.routeUrlsPrefix' ), '/auth/pick' ),\n          recover: path.join( hotplate.config.get( 'hotplate.routeUrlsPrefix' ), '/auth/pick'),\n          register: path.join( hotplate.config.get( 'hotplate.routeUrlsPrefix' ),'/auth/pick'),\n          manager: '/',\n        },\n\n        fail: {\n          signin: path.join( hotplate.config.get( 'hotplate.routeUrlsPrefix' ), '/auth/welcome' ),\n          recover: path.join( hotplate.config.get( 'hotplate.routeUrlsPrefix' ), '/auth/welcome' ),\n          register: path.join( hotplate.config.get( 'hotplate.routeUrlsPrefix' ), '/auth/welcome' ),\n          manager: '/',\n        }\n      },\n      responsePage: basicResponsePage,\n      appURL: path.join( hotplate.config.get( 'hotplate.routeUrlsPrefix' ), '/app' ),\n    };"
        },
        "hotCoreClientFiles": {
            "name": "hotCoreClientFiles",
            "shortname": "hotCoreClientFiles",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "hotCoreClientFiles",
            "namespace": "",
            "file": "hotplate/node_modules/hotCoreClientFiles/lib/hotCoreClientFiles.js",
            "line": 18,
            "description": "Module to handle the delivery of files made available by modules",
            "mainName": "hotCoreClientFiles",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "hotCoreMultiHome": {
            "name": "hotCoreMultiHome",
            "shortname": "hotCoreMultiHome",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "hotCoreMultiHome",
            "namespace": "",
            "file": "hotplate/node_modules/hotCoreMultiHome/lib/hotCoreMultiHome.js",
            "line": 3,
            "description": "Provides multi-home abilities to Hotplate\n\nThis module's aim is to make sure Hotplate has full multi-home abilities. The module itself:\n\n* Defines all of the relevant stores ( `workspaces`, `workspacesUsers`, `usersWorkspaces`)\n* Places important variables on the rendered page ( `vars.hotCoreMultiHome.enabled` and `.multiHomeURL`)\n* Places the crucial `vars.hotCoreMultiHome.workspaceId` variable on the rendered page\n\nHowever, given the nature of this module, there are _several_ other modules in Hotplate that interact with it.\n\n## SUMMARY: modules that deal with multihome environments:\n\n* hotCoreJsonRestStores -- it will broadcast comet messages only to workspace users\n* hotCoreStoreConfig -- if the url has `:workspaceId`, it will set config stores' records in the page for that workspace\n* hotDojoGlobals -- will set global variable workspaceId if it's set within the page\n* hotDojoStoreConfig -- will call `stores()` passing `userId` and `workspaceId` in resolution hash, allowing easy workspace-bound setting lists\n* hotDojoAppContainer -- fully multi-home aware, will hook to correct URL and, if `:workspaceId` is in the URL, it will check that it exists.\n* hotDojoAuth -- fully multi-home aware, providing a pick mechanism etc. Gets the workspace URL from `vars.hotCoreMultiHome.multiHomeURL` \n\n* hotDojoComet -- will add header `X-hotplate-workspaceId` to tab messages requests\n* hotCoreComet -- will use `X-hotplate-workspaceId` to return updated config records for the expired workspace\n\nA more detailed explanation of what each module does, in terms of interaction with hotCoreMultiHome, follows. Note that any interaction happens on the basis that `hotCoreMultiHome` is enabled.\n\n## hotCoreJsonRestStores\n\n* ./node_modules/hotCoreJsonRestStores/lib/hotCoreJsonRestStores.js\n\nWhen broadcasting changes to stores via the hook `cometBroadcast`, it will change its behavious depending on multi-home being enabled or not.\n\nIf multiHome is enabled, checks if the record has a workspaceId field -- in which case, it will only broadcast the message to users in that workspaceId (it will do so by passing a `makeTabIdHash()` function to the `cometBroadcast` hook) \n\n## hotCoreStoreConfig\n\n* ./node_modules/hotCoreStoreConfig/lib/hotCoreStoreConfig.js\n\nImplements `pageElementsPerPage` that passes `params.workspaceId` to `getConfig()` -- which means that if the URL has the `workspaceId` parameter, it will add a variable with the workspace's configuration to the page. It also passes `session.userId` to `getConfig()`, so if the user is logged in, it will return that user's config too.\n\nNOTE: `getConfig()` is implemented here. Signature: `function( workspaceId, userId, cb )`. It basically will return all configs with `workspaceId` and/or `userId` set in their `store.configStore` property\n\n## hotDojoGlobals\n\n* ./node_modules/hotDojoGlobals/client/globals.js\n\nSets the global variable `workspaceId` based on `vars.hotCoreMultiHome.workspaceId` (Unrelated: it also sets `userId` based in `vars.hotCoreAuth.userId`)\n\n## hotDojoStoreConfig\n\n* ./node_modules/hotDojoStoreConfig/client/ConfigVars.js\n\nConfig variables are bound to \"nothing\" (system-wide settings), to a user (user-wide settings), to a workspace (workspace-wide settings) or both (user-specific settings for a specific workspace). That's why ConfigVars will call `stores()` passing `:userId` and :`workspaceId` in resolution hash.\n\nNote that `:workspaceId` and `userId` are the ONLY parameters allowed in a config store URL.\n\n\n## hotDojoAppContainer\n\n* ./node_modules/hotDojoAppContainer/lib/hotDojoAppContainer.js\n\nIn terms of URLs, it will attach to `hotCoreMultiHome.multiHomeURL` or `hotCoreAuth.appURL` depending on multi-home being enabled or not. Also, IF `:workspaceId` is in the URL as a parameter, it will check that the workspace actually exists or it will return an error.\n\n## hotDojoAuth\n\n* ./node_modules/hotDojoAuth/lib/hotDojoAuth.js\n\nThe pagePick callback is there just for multi-home environments, picking the workspace\n\n* ./node_modules/hotDojoAuth/client/NewWorkspace.js\n\nAfter adding a new workspace, it will redirect to it thanks to `vars.hotCoreMultiHome.multiHomeURL` (replacing `:workspaceId` with the id of the record that was just created) \n\n* ./node_modules/hotDojoAuth/client/Pick.js\n\nAfter picking a workspace, it will redirect to it thanks to `vars.hotCoreMultiHome.multiHomeURL` as above\n\n* ./node_modules/hotDojoStoreConfig/client/ConfigVars.js\n\n## hotDojoComet\n\n* ./node_modules/hotDojoComet/client/messages.js\n\nIt adds a header `X-hotplate-workspaceId` to tabId requests. This is ESSENTIAL so that hotCoreComet knows which workspaceId the tab belongs to. Yes, IT NEEDS to know it: if the tab is not found or it's expired, hotCoreComet will return only one message, `resetStores`, which will INCLUDE all configuration records for that user and workspace (in order to save GETs and implement error management app-side).\n\n## hotCoreComet\n\n* ./node_modules/hotCoreComet/lib/hotCoreComet.js\n\nUses the header `X-hotplate-workspaceId` to return the config stores' records for that `workspaceId` in case the tab is expired or not there",
            "mainName": "hotCoreMultiHome",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "hotCoreTransport": {
            "name": "hotCoreTransport",
            "shortname": "hotCoreTransport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "hotCoreTransport",
            "namespace": "",
            "file": "hotplate/node_modules/hotCoreTransport/lib/hotCoreTransport.js",
            "line": 21,
            "description": "Provides tranport functionalities (SMS an email) to hotplate modules",
            "mainName": "hotCoreTransport",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        }
    },
    "classitems": [
        {
            "file": "hotplate/node_modules/hotCoreAuth/lib/auth/facebook.js",
            "line": 8,
            "description": "Returns a function compatible with hotCoreAuth to implement Facebook authentication.\nIt will set the following routes:\n\n  * Manager: `/auth/manager/facebook`, `/auth/manager/facebook/callback`\n  * Signin: `/auth/signin/facebook`, `/auth/manager/signin/callback`\n  * Recover: `/auth/recover/facebook`, `/auth/manager/recover/callback`\n  * Register: `/auth/register/facebook`, `/auth/manager/register/callback`\n  * Resume: `/auth/resume/facebook`, `/auth/manager/resume/callback`",
            "itemtype": "method",
            "name": "exports",
            "params": [
                {
                    "name": "app",
                    "description": "Express' `app` variable, used to create routes",
                    "type": "Object"
                },
                {
                    "name": "strategyName",
                    "description": "The name of the strategy that needs to be setup (e.g. 'facebook')",
                    "type": "String"
                },
                {
                    "name": "stores",
                    "description": "The hash of all available stores. Mainly passed to optimise",
                    "type": "Object"
                }
            ],
            "class": "hotCoreAuth.facebook"
        },
        {
            "file": "hotplate/node_modules/hotCoreAuth/lib/auth/local.js",
            "line": 27,
            "description": "Adds `logins` to the list of stores returned by hotCoreAuth\n\n## `logins`\n\nThis is used so that an applicaton can know in advance if a user login is already taken. It does so by querying `usersStrategies`, where `strategyId` is 'local' and `field1` is `request.options.conditions.login`. \n\n    // This is used so that an applicaton can know in advance if a user login is already taken\n    var Logins = declare( JsonRestStores, JsonRestStores.HTTPMixin, {\n  \n      schema: new SimpleSchema({\n        login     : { type: 'string', required: true, lowercase: true, trim: 30, searchable: true },\n      }),\n \n      storeName:  'logins',\n\n      handleGetQuery: true,\n\n      // This is descriptive only\n      queryConditions: { \n        type: 'eq',\n        args: [ 'login', '#login' ]\n      },\n\n      publicURL: '/logins/:id',\n      hotExpose: true,\n  \n      // Will look for `requests.options.conditions.login` in `usersStrategies`. If it's there,\n      // will return it as a 1-element collection `[ { login: request.options.conditions.login } ]`\n      implementQuery: function( request, cb ){ }\n\n    });\n    stores.login = new Logins();",
            "itemtype": "method",
            "name": "extraStores",
            "params": [
                {
                    "name": "stores",
                    "description": "The existing hotCoreAuth stores",
                    "type": "Object"
                },
                {
                    "name": "done",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "hotCoreAuth.local"
        },
        {
            "file": "hotplate/node_modules/hotCoreAuth/lib/auth/local.js",
            "line": 109,
            "description": "A function that sets the routes to implement Local (username/password) authentication.\nIt will set the following routes:\n\n  * Manager: `/auth/manager/local`\n  * Signin: `/auth/signin/local`\n  * Recover: `/auth/recover/local`\n  * Register: `/auth/register/local`\n  * Resume: `/auth/resume/local`",
            "itemtype": "method",
            "name": "strategyRoutesMaker",
            "params": [
                {
                    "name": "app",
                    "description": "Express' `app` variable, used to create routes",
                    "type": "Object"
                },
                {
                    "name": "strategyName",
                    "description": "The name of the strategy that needs to be setup (e.g. 'facebook')",
                    "type": "String"
                },
                {
                    "name": "done",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "hotCoreAuth.local"
        },
        {
            "file": "hotplate/node_modules/hotCoreAuth/lib/hotCoreAuth.js",
            "line": 242,
            "description": "Returns a function with signature `function( err, user, profile )`,\nwhich will serve the right response depending on the cookie\ncalled `strategyId + '-' + action`\n\nIt might redirect, close, redirect opener and close, return JSON, etc.",
            "itemtype": "method",
            "name": "makeResponder",
            "params": [
                {
                    "name": "req",
                    "description": "Express' `req`",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "Express' `res`",
                    "type": "Object"
                },
                {
                    "name": "next",
                    "description": "Express' `next()`",
                    "type": "Function"
                },
                {
                    "name": "strategyIdThe",
                    "description": "make of the strategy (e.g. 'facebook', 'local')",
                    "type": "String"
                },
                {
                    "name": "action",
                    "description": "The action (`signin`, `recover`, `register`, `resume`, `manager`)",
                    "type": "String"
                }
            ],
            "class": "hotCoreAuth",
            "module": "hotCoreAuth"
        },
        {
            "file": "hotplate/node_modules/hotCoreAuth/lib/hotCoreAuth.js",
            "line": 357,
            "description": "It returns the authentication stores \nThe stores returned are:\n\n## `authStrategies`\n\nThe strategies available. This store is a pseudo-store (it doesn't rely on data stored in a database). Its data is the keys of the configuration object `hotCoreAuth.strategies`, which is used to implement `get` and `getQuery`.\n    \n    var AuthStrategies = declare( JsonRestStores, JsonRestStores.HTTPMixin, {\n\n      schema: new SimpleSchema({\n        id:        { type: 'blob', isRequired: true, trim: 30 }  ,\n      }),\n\n      handleGet: true,\n      handleGetQuery: true,\n\n      storeName:  'authStrategies',\n\n      publicURL: '/authstrategies/:id',\n      hotExpose: true,\n\n      // Fetch one strategy (if it's defined in hotCoreAuth.strategies)\n      implementFetchOne: function( request, cb ){ },\n\n      // Return the strategies, depending on `hotCoreAuth.strategies`'s keys\n      implementQuery: function( request, cb ){ },\n    });\n\n    stores.authStrategies = new AuthStrategies();\n\n\n## `users`\n\nThe list of users. Note that only very little information is stored about the user itself: this table only stores the `id` and the `recoverToken` fields. It is not exposed to the client application at all: it's only created to be accessible via API within Hotplate itself.\n\n    var Users = declare( HotStore, {\n  \n      schema: new HotSchema({\n        id                 : { type: 'id' },\n        recoverToken       : { type: 'blob', searchable: true, notempty: true },\n        recoverTokenCreated: { type: 'date', searchable: true, notempty: true },\n      }),\n\n      storeName:  'users',\n      idProperty: 'id',\n    });\n    stores.users = new Users();\n\n## `usersStrategies`\n\nThe list of strategies associated to a specific user. It implements `get`, `getQuery` and `delete`, and it only allows querying to the record owner (session.userId needs to match the query string's userId). It also doesn't allow a user to delete their last remaining strategy (otherwise they won't be allowed to log back in, nor to recover their access).\n\nNote that `field3` and `field4` are used by hotCoreAuth to store sensitive information, as they are never returned by the store.\n  \n    var UsersStrategies = declare( HotStore, {\n  \n      schema: new HotSchema({\n        strategyId:  { type: 'blob', searchable: true, required: true, trim: 30 }  ,\n        field1:      { type: 'blob', searchable: true, required: false, trim: 255 } ,\n        field2:      { type: 'blob', searchable: true, required: false, trim: 255 } ,\n        field3:      { type: 'blob', searchable: true, required: false, trim: 255 } ,\n        field4:      { type: 'blob', searchable: true, required: false, trim: 255 } ,\n      }),\n  \n      // Nothing is searchable in usersStrategies by default\n      onlineSearchSchema: new HotSchema({\n      }),\n\n      storeName:  'usersStrategies',\n\n      publicURL: '/users/:userId/strategies/:id',\n      hotExpose: true,\n\n      preserveCacheOnReset: true,\n\n      handleGet: true,\n      handleGetQuery: true,\n      handleDelete: true,\n\n      // Users are only allowed to use `delete`, `get` and `getQuery` on their own strategies\n      // Also, users are only allowed to `delete` a strategy if it's not the last one remaining\n      checkPermissions: function( request, method, cb ){ ... },\n     \n      // The field `field3` and `field4` are taken out of the equation, as they are \"secret\"\n      extrapolateDoc: function( request, method, doc, cb ){ ... }\n    });\n    stores.usersStrategies = new UsersStrategies();",
            "itemtype": "event",
            "name": "stores",
            "requires": [
                "hotCoreJsonRestStores"
            ],
            "return": {
                "description": "An associative array of stores",
                "type": "Object"
            },
            "class": "hotCoreAuth",
            "module": "hotCoreAuth"
        },
        {
            "file": "hotplate/node_modules/hotCoreAuth/lib/hotCoreAuth.js",
            "line": 638,
            "description": "Sets recover URL `/recover/:recoverToken` (for token recovery).  \nAlso goes through the list of `AuthStrategies`, loads the right\nfiles in `auth/{strategy name}.js` (e.g. {{#crossLink \"hotCoreAuth.facebook\"}}{{/crossLink}}), and runs them.\nThis basically ensures that all strategies have the right URLs all set for them to work.",
            "itemtype": "event",
            "name": "setRoutes",
            "class": "hotCoreAuth",
            "module": "hotCoreAuth"
        },
        {
            "file": "hotplate/node_modules/hotCoreClientFiles/lib/hotCoreClientFiles.js",
            "line": 26,
            "description": "The list of local paths that will be handles by the module",
            "itemtype": "attribute",
            "name": "localLocations",
            "class": "hotCoreClientFiles",
            "module": "hotCoreClientFiles"
        },
        {
            "file": "hotplate/node_modules/hotCoreClientFiles/lib/hotCoreClientFiles.js",
            "line": 33,
            "description": "Call the hook `clientPaths`, and store the results\nin `localLocations`",
            "itemtype": "event",
            "name": "init",
            "class": "hotCoreClientFiles",
            "module": "hotCoreClientFiles"
        },
        {
            "file": "hotplate/node_modules/hotCoreClientFiles/lib/hotCoreClientFiles.js",
            "line": 76,
            "description": "Returns a function that will serve files that are set as\npublic by other modules by implementing the `clientPaths` hook\n\nThis function is a mixture of:\n  * express/node_modules/connect/lib/middleware\n  * express/lib/application.js#app.render",
            "itemtype": "method",
            "name": "serve",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "class": "hotCoreClientFiles",
            "module": "hotCoreClientFiles"
        },
        {
            "file": "hotplate/node_modules/hotCorePage/lib/Vars.js",
            "line": 41,
            "description": "Add a variable",
            "params": [
                {
                    "name": "The",
                    "description": "module's name",
                    "type": "String"
                },
                {
                    "name": "A",
                    "description": "variable's name",
                    "type": "String"
                },
                {
                    "name": "A",
                    "description": "variable's value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "this",
                "type": "Csses"
            },
            "api": "public",
            "class": "hotCoreTransport",
            "module": "hotCoreMultiHome"
        },
        {
            "file": "hotplate/node_modules/hotCoreTransport/lib/hotCoreTransport.js",
            "line": 331,
            "itemtype": "event",
            "name": "setRoutes",
            "class": "hotCoreTransport",
            "module": "hotCoreTransport"
        },
        {
            "file": "hotplate/node_modules/hotCoreTransport/lib/hotCoreTransport.js",
            "line": 361,
            "itemtype": "event",
            "name": "run",
            "class": "hotCoreTransport",
            "module": "hotCoreTransport"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: api",
            "line": " hotplate/node_modules/hotCorePage/lib/Vars.js:41"
        },
        {
            "message": "Missing item type\nAdd a variable",
            "line": " hotplate/node_modules/hotCorePage/lib/Vars.js:41"
        }
    ]
}