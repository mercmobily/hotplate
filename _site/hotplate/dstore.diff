diff --git a/Observable.js b/Observable.js
index d9a6aaf..0ff625b 100644
--- a/Observable.js
+++ b/Observable.js
@@ -203,7 +203,6 @@ define([
 				event = lang.delegate(event, defaultEventProps[type]);
 				when(observed._results || observed._partialResults, function (resultsArray) {
 					/* jshint maxcomplexity: 30 */
-
 					function emitEvent() {
 						// TODO: Eventually we will want to aggregate all the listener events
 						// in an event turn, but we will wait until we have a reliable, performant queueing
@@ -287,7 +286,8 @@ define([
 											&& removedFrom <= (range.start + range.count)) {
 											candidateIndex = removedFrom;
 										} else {
-											candidateIndex = sampleArray.length;
+											candidateIndex = store.defaultNewToStart ? 0 : sampleArray.length;
+
 										}
 									}
 									sampleArray.splice(candidateIndex, 0, target);
diff --git a/Request.js b/Request.js
index e0e3cc1..aae36c5 100644
--- a/Request.js
+++ b/Request.js
@@ -157,7 +157,7 @@ define([
 
 		_renderFilterParams: function (filter) {
 			// summary:
-			//		Constructs filter-related params to be inserted into the query string
+			//		Constructs filter-relasortted params to be inserted into the query string
 			// returns: String
 			//		Filter-related params to be inserted in the query string
 			return [ typeof filter === 'object' ? ioQuery.objectToQuery(filter) : filter ];
diff --git a/Rest.js b/Rest.js
index 6ec14f0..2b129d1 100644
--- a/Rest.js
+++ b/Rest.js
@@ -42,7 +42,8 @@ define([
 			var headers = lang.mixin({ Accept: this.accepts }, this.headers, options.headers || options);
 			var store = this;
 			return request(this.target + id, {
-				headers: headers
+				headers: headers,
+				timeout: 10000
 			}).then(function (response) {
 				return store._restore(store.parse(response), true);
 			});
@@ -75,6 +76,7 @@ define([
 
 			var initialResponse = request(hasId ? this.target + id : this.target, {
 				method: hasId && !options.incremental ? 'PUT' : 'POST',
+				timeout: 10000,
 				data: this.stringify(object),
 				headers: lang.mixin({
 					'Content-Type': 'application/json',
@@ -125,7 +127,9 @@ define([
 			var store = this;
 			return request(this.target + id, {
 				method: 'DELETE',
-				headers: lang.mixin({}, this.headers, options.headers)
+				headers: lang.mixin({}, this.headers, options.headers),
+				timeout: 10000
+
 			}).then(function (response) {
 				var target = response && store.parse(response);
 				store.emit('remove', {id: id, target: target});
diff --git a/objectQueryEngine.js b/objectQueryEngine.js
index c00d61a..81ae2dd 100644
--- a/objectQueryEngine.js
+++ b/objectQueryEngine.js
@@ -23,9 +23,9 @@ define([
 							var required = queryObject[key];
 
 							var objectValue = object.get ? object.get(key) : object[key];
-							if( store.ignoreCaseInFilter ){
-								objectValue.toUpperCase && ( objectValue = objectValue.toUpperCase());
-								required.toUpperCase && ( required = required.toUpperCase());
+							if( true || store.ignoreCaseInFilter ){
+								objectValue && objectValue.toUpperCase && ( objectValue = objectValue.toUpperCase());
+								required && required.toUpperCase && ( required = required.toUpperCase());
 							}
 							if (required && required.test) {
 								// an object can provide a test method, which makes it work with regex
@@ -81,9 +81,9 @@ define([
 							aValue != null && (aValue = aValue.valueOf());
 							bValue != null && (bValue = bValue.valueOf());
 
-							if( store.ignoreCaseInSort ){
-								aValue.toUpperCase  && ( aValue = aValue.toUpperCase() );
-								bValue.toUpperCase  && ( bValue = bValue.toUpperCase() );
+							if( true || store.ignoreCaseInSort ){
+								aValue && aValue.toUpperCase  && ( aValue = aValue.toUpperCase() );
+								bValue && bValue.toUpperCase  && ( bValue = bValue.toUpperCase() );
 							}
 
 							comparison = aValue === bValue
