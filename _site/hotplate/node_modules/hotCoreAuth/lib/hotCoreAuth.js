var dummy
  , path = require('path')
  , hotplate = require('hotplate')
  , declare = require('simpledeclare')

  , e = require('allhttperrors')

  // Stores
  , SimpleSchema = require('simpleschema')
  , MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')

  , JsonRestStore = require('jsonreststores')
  , MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')

  // Passport stuff
  , passport = require('passport')
  , FacebookStrategy = require('passport-facebook').Strategy
  , LocalStrategy = require('passport-local').Strategy

  , hotCoreJsonRestStores = require( 'hotCoreJsonRestStores' )
  , hotCoreStoreRegistry = require( 'hotCoreStoreRegistry' )
;

/**
Provides authentication abilities to Hotplate

This module's goal is to do two things.

First of all , it defines all of the stores necessary for authentication. The stores in question are:

* Users. The list of users.
* UserStrategies. The list of strategies set bu that user.
* AuthStrategies. The complete list of auth strategies available
* UserLogins. A store that simply allows the search of username, used by Ajax to check if a username is already taken



@module hotCoreAuth
@main hotCoreAuth
@class hotCoreAuth
@static
*/

// Set some sane defaults

var basicResponsePage = function( strategyId, action, user, profile ){
  var response = '';
  response += "<html><body><script type=\"text/javascript\">setTimeout(function(){ window.close() }, 5000);</script> RESPONSE</body></html>";
  return response;
};



hotplate.config.set('hotCoreAuth', {

  callbackURLBase: 'http://localhost:3000',

  recoverURLexpiry: 60*30, // Seconds for which the recover URL works for

  // Only local strategy enabled by default
  strategies: {
    local: { },
  },

  redirectURLs: {
    success: {
      signin: '/pages/pick',
      recover: '/pages/pick',
      register: '/pages/pick',
      manager: '/',
    },

    fail: {
      signin: '/pages/welcome',
      recover: '/pages/welcome',
      register: '/pages/welcome',
      manager: '/',
    }
  },
  responsePage: basicResponsePage,
  appURL: '/app',

});


/**
  Initialisation hook. It creates the basic authentication stores
  (Users, UserStrategies, AuthStrategies, UserLogins) 

  @event init
  @requires hotCoreJsonRestStores
*/

hotplate.hotEvents.on( 'stores', 'hotCoreAuth', function( done ){

  var stores = {}

  hotCoreJsonRestStores.getJsonRestStoresMixins( function( err, mixins ){
    if( err ){
      done( err );
    } else {

      var Store = declare( [ JsonRestStore, MongoDriverMixin, mixins.StoreMixin ] );
      var Schema = declare( [ SimpleSchema, MongoSchemaMixin, mixins.SchemaMixin ] );

      // ***********************************
      // *** USERS *************************
      // ***********************************
    
      stores.Users = declare( Store, {
    
        // COMMON
        schema: new Schema({
          _id:                 { type: 'id' },
    
          recoverToken:        { type: 'string', searchable: true, searchPartial: false, sortable: false, notempty: true },
          recoverTokenCreated: { type: 'date', searchable: true, searchPartial: false, sortable: false, notempty: true },
    
          // name: { type: 'string', searchable: true, searchPartial: false, sortable: false, notEmpty: true, sharedValidator: 'user', trim: 15 },
        }),
    
        publicURL: '/users/',
    
        storeName:  'users',
        paramIds: [ '_id' ],
    
      });
    
      stores.UserStrategies = declare( Store, {
    
        schema: new Schema({
          _id       :  { type: 'id' },
    
          strategyId:  { type: 'string', required: true, trim: 30 }  ,
          userId:      { type: 'id', required: true },
    
          field1:      { type: 'string', required: false, trim: 255 } ,
          field2:      { type: 'string', required: false, trim: 255 } ,
          field3:      { type: 'string', required: false, trim: 255 } ,
          field4:      { type: 'string', required: false, trim: 255 } ,
        }),
    
        searchSchema: new Schema({
          _id       :  { type: 'id' },
          strategyId:  { type: 'string', trim: 30 }  ,
          userId:      { type: 'id' },
    
          field1:      { type: 'string', trim: 255 } ,
          field2:      { type: 'string', trim: 255 } ,
          field3:      { type: 'string', trim: 255 } ,
          field4:      { type: 'string', trim: 255 } ,
    
        }),
    
    		storeName:  'userStrategies',
    
        // #3
     
        handleGet: true,
        checkPermissionsGet: function( params, body, options, doc, fullDoc, cb ){
          // Only their own strategies
          if( this._req.session.userId != params.userId ) return cb( null, false );
    
          cb( null, true );
        },
    
        handleGetQuery: true,
        checkPermissionsGetQuery: function( params, body, options, cb ){
          // Only their own strategies
          if( this._req.session.userId != params.userId ) return cb( null, false );
          
          // TODO: Don't filter by fieldX
          if( typeof( options.filters ) === 'object' && ( options.filters.field1 || options.filters.field2 || options.filters.field3 || options.filters.field4 )  ){
            cb( null, false );
          }
    
          cb( null, true );
        },
    
        // Make sure that, if the request is from the web, field3 and field4 are out of the equation as
        // they often include nice goodies like passwords etc.
        extrapolateDoc: function( request, method, p, cb ){

          var fullDoc = p.fullDoc;
          
          if( ! this.remote ) return cb( null, fullDoc );
    
          // Copy body onto newBody, leaving out fieldX 
          var doc = {};
          for( var i in fullDoc ){
            if( i != 'field3' && i != 'field4' ) doc[ i ] = fullDoc[ i ];
          }
          cb( null, doc );
          
        },
    
    
        handleDelete: true,
        checkPermissionsDelete: function( params, body, options, doc, fullDoc, cb ){
    
          // Only their own strategies
          if( this._req.session.userId != params.userId ) return cb( null, false );
    
          UserStrategies.GetQuery( { filters: { userId: doc.userId } }, function( err, queryDocs, idProperty){
            if( queryDocs.length > 1 ){
              cb( null, true );
            } else {
              cb( null, false );
            }
          });
    
        },
    
        paramIds: [ 'userId', '_id' ],
    
        publicURL: '/user/:userId/strategies/',
    
      });
    
    
      stores.AuthStrategies = declare( JsonRestStore, {
    
        // COMMON
        schema: new Schema({
          strategyId:        { type: 'string', isRequired: true, trim: 30 }  ,
        }),
    
        handlePut: false,
        handlePost: false,
        handleGet: true,
        handleGetQuery: true,
        handleDelete: false,
    
        storeName:  'authStrategies',
        paramIds: [ 'strategyId' ],
    
        driverAllDbFetch: function( params, body, options, cb ){
          var strategies = hotplate.config.get('hotCoreAuth.strategies');
          var doc;
    
          // No strategies defined in Hotplate, end of story
          if( typeof( strategies ) === 'undefined' ){
            return cb( null, null );     
          }
     
          // Check if the strategy is one of the ones defined in Hotplate
          if( typeof( strategies[ params.strategyId ] ) !== 'undefined' ){
            doc = {}
            doc.strategyId = params[ 'strategyId' ];
          } else {
            doc = null;
          }
    
          // Return whatever was found
          cb( null, doc );
        },
    
        driverGetDbQuery: function( params, body, options, cb ){
          var strategies = hotplate.config.get('hotCoreAuth.strategies');
          var doc;
          var docs = [];
          
          for( var strategyId in strategies ){
            docs.push( { strategyId: strategyId } );
          }      
          cb( null, docs );
        },
    
        publicURL: '/authStrategies/',
    
      });
    
    
      // This is used so that an applicaton can know in advance if a user login is already taken
      stores.UserLogins = declare( JsonRestStore, {
    
        schema: new Schema({
          login     :  { type: 'string', required: true, lowercase: true, trim: 30, searchable: true },
        }),
    
    		storeName:  'userLogins',
    
        handlePut: false,
        handlePost: false,
        handleGet: false,
        handleGetQuery: true,
        handleDelete: false,
    
        paramIds: [ '_id' ],
    
        driverGetDbQuery: function( params, body, options, cb ){
          
          var self = this;
    
          UserStrategies.GetQuery( { filters: { strategyId: 'local', field1: options.filters.login } }, function( err, res ){
            if( err ){
              cb( err, null );
            } else {
              if( res.length ){
                self.schema.makeId( res, function( err, id ){
                  cb( null, [ { login: options.filters.login, _id: id } ] );
                });
              } else {
                cb( null, [ ] );
              }
            }
          });      
    
        },   
    
        publicURL: '/userLogins/',
    
      });
    
    
      done( null, [ stores.Users, stores.UserStrategies, stores.AuthStrategies, stores.UserLogins ] );

    }
  });

})

/**
Sets recover URL `/recover/:recoverToken` (for token recovery).  
Also goes through the list of `AuthStrategies`, loads the right
files in `auth/{strategy name}.js` (e.g. {{#crossLink "hotCoreAuth.facebook"}}{{/crossLink}}), and runs them.
This basically ensures that all strategies have the right URLs all set for them to work.

@event run
*/
hotplate.hotEvents.on( 'setRoutes', function( app, done ){

  hotCoreStoreRegistry.getAllStores( function( err, storesData ){
    if( err ){
      done( err );
    } else {

      // 
      var stores = storesData.stores;

      app.get('/recover/:recoverToken', function( req, res, next ){
    
        stores.users.Store.GetQuery( { filters: { recoverToken: req.params[ 'recoverToken' ] } }, function( err, result ){
          if( err ){
            done( err, null );
          } else {
            if( result.length == 0 ){
              // Error page
    
              // Artificially create a TokenInvalid error, and next( err ) it 
              var error = new Error();
              error.name = "TokenInvalidError";
              error.message = "Token not valid!";
              req.hotError = error;
              next( error );
    
            } else {
            
              var user = result[0];
    
              if( ! user.recoverTokenCreated ){
    
                // Artificially create a TokenDateInvalid error, and next( err ) it 
                var error = new Error();
                error.name = "TokenDateInvalidError";
                error.message = "Token date invalid!";
                req.hotError = error;
                next( error );
              } else {
    
                // Get the important variables 
                var tokenAgeInSeconds = Math.round( ( (new Date() ) - user.recoverTokenCreated ) / 1000 );
                var recoverURLexpiry = hotplate.config.get( 'hotCoreAuth.recoverURLexpiry' ); 
    
                var tokenIsGood = tokenAgeInSeconds < recoverURLexpiry;
    
                if( ! tokenIsGood ){
    
                  // Artificially create a TokenExpired error, and next( err ) it 
                  var error = new Error();
                  error.name = "TokenExpiredError";
                  error.message = "Token expired!";
                  req.hotError = error;
                  next( error );
    
                } else {
    
                  delete user.recoverToken;
                  delete user.recoverTokenCreated;
    
                  stores.users.Store.Put( user._id, user, function( err, userNew ){
                    if( err ){
                      next( err );
                    } else {
    
                      // Log the user in using the token!
                      req.session.loggedIn = true;
                      req.session.userId = user._id;
    
                      // Redirect to the right URL
                      res.redirect( hotplate.config.get('hotCoreAuth.redirectURLs.success.recover') );
                    }
      
                  });
                }
                 
    
              }
              
            }
              
          }
        });
    
    
      }); 
    
    
    
      function makeResponder( req, res, next, strategyId, action ) {
    
        return function(err, user, profile ) {
    
          var responseType, strategies;
            
          // #2      
    
          var k = req.cookies[ strategyId + '-' + action ];
          if( typeof( k ) !== 'undefined' ){
            responseType = k;
          }
    
          // Fallback option
          if( ! responseType ) responseType = 'redirect';
    
          // Defaults to an empty profile object
          if( typeof( profile ) === 'undefined' ){
            profile = {};
          }
    
          // Error: just return/next that
          if( err ) { return next( err ); }
    
          // #1
    
          switch( responseType ){
    
            case 'content':
    
                // Work out the page's content by calling the user-set hotCoreAuth/responsePage function
                // Note: if hotCoreAuth/responsePage is not set, it will use a placeholder fallback string
                var content;
                var contentFunction = hotplate.store.get( 'hotCoreAuth.responsePage' );
                if( typeof( contentFunction ) === 'function' ){
                  content = contentFunction( strategyId, action, user, profile );
                } else {
                  content = "PLEASE SET hotCoreAuth/responsePage IN YOUR SERVER FILE TO CUSTOMIZE CONTENTS";
                }
    
    
                // Send the contents
                res.send( content );      
            break;
    
    
    
            case 'close':
    
              if( ! user && typeof( profile.message) !== 'undefined'  ){
                
                // FIXME: http://stackoverflow.com/questions/17141863/escaping-error-message-in-javascript
                res.send('<html><script>window.opener.alert("' + profile.message + '");window.close();</script></html>');      
              } else {
                res.send('<html><script>window.close();</script></html>');      
              }
            break;
    
            case 'ajax':
    
              if( user ){
                res.json( 200, { user: user, profile: profile } );
              } else {
                var error = 'Authentication error';
                if( typeof( profile.message) !== 'undefined' ) error =  profile.message;
                res.json( 403, { message: error } );
              }
    
            break;
    
    
            case 'redirect-opener':
    
              if( ! user && typeof( profile.message) !== 'undefined'  ){
    
                // FIXME: http://stackoverflow.com/questions/17141863/escaping-error-message-in-javascript
                res.send('<html><script>window.opener.alert("' + profile.message + '");window.close();</script></html>');      
                
              } else {
                var redirectURL = hotplate.config.get('hotCoreAuth.redirectURLs.success.' + action) || '/';
                res.send('<html><script>window.opener.location = "' + redirectURL + '";window.close();</script></html>');      
              }
            break;
    
    
            case 'redirect':
            default:
    
              if( user ){
                var redirectURL = hotplate.store.get('hotCoreAuth.redirectURLs.success.' + action) || '/';
                res.redirect( redirectURL );
              } else {
    
                // Add the error to the session messages
                if( typeof( profile.message) !== 'undefined'  ){
                  req.session.messages = req.session.messages || []; 
                  req.session.messages.push( { type: 'error', message: profile.message } );
                }
    
                var redirectURL = hotplate.store.get('hotCoreAuth.redirectURLs.fail.' + action) || '/';
                res.redirect( redirectURL );
              }
            break;
    
          }
    
        }
      }
    
      if( typeof( hotplate.config.get('hotCoreAuth.strategies' )) === 'object' ){
        Object.keys( hotplate.config.get('hotCoreAuth.strategies' )).forEach( function( strategyName ) {
        
          // Get the strategy's data
          var strategyConfig = hotplate.config.get('hotCoreAuth.strategies' )[strategyName];
    
          // Gets the right strategy maker and runs it
          strategyMaker = require( './auth/' + strategyName );
          strategyMaker( app, strategyConfig, makeResponder, stores.authStrategies.Store, stores.users.Store, stores.userStrategies.Store, stores.userLogins.Store );
        });
    
      }
    
      done( null );
    }
  });

})


hotplate.hotEvents.on( 'pageElements', 'hotCoreAuth', function( done ){
  var strategyIds = Object.keys( hotplate.config.get('hotCoreAuth.strategies') ) || [];
  
  done( null, {
    vars: [
            { name: 'strategyIds',  value: strategyIds },
            { name: 'successURLs',  value: hotplate.config.get('hotCoreAuth.redirectURLs.success') },
            { name: 'failURLs',     value: hotplate.config.get('hotCoreAuth.redirectURLs.fail') },
          ],
  });
});


hotplate.hotEvents.on( 'pageElementsPerPage', 'hotCoreAuth', function( elements, req, pageName, done ){

  var vars = [];

  // Add the user ID to the page as a variable
  if( req.session.userId ) {
    vars.push( { name: 'userId', value: req.session.userId } );
  }

  done( null, {
    vars: vars 
  });

});


